CREATE OR REPLACE PROCEDURE DWSCM."SP_UI_BF_00_SEASONAL_INDEX" 
(
	p_VER_CD 		VARCHAR2
  , P_RT_ROLLBACK_FLAG	OUT VARCHAR2   
  , P_RT_MSG			OUT VARCHAR2
)
IS
  /**************************************************************************
   * Copyrightⓒ2023 ZIONEX, All rights reserved.
   **************************************************************************
   * Name : SP_UI_BF_00_SEASONAL_INDEX
   * Purpose : 주간 품목 시즌지수 생성
   * Notes :
   **************************************************************************/
	p_INPUT_FROM_DATE 	DATE;
	p_INPUT_TO_DATE 	DATE;
	p_TARGET_TO_DATE 	DATE;
	a VARCHAR2(20);
	b VARCHAR2(200);
	c VARCHAR2(50);

BEGIN
	SELECT MAX(INPUT_FROM_DATE)
		 , MAX(INPUT_TO_DATE)
		 , TRUNC(ADD_MONTHS(MAX(TARGET_FROM_DATE), 6), 'IW')
		 INTO
		   p_INPUT_FROM_DATE
		 , p_INPUT_TO_DATE
		 , p_TARGET_TO_DATE
	  FROM TB_BF_CONTROL_BOARD_VER_DTL
	  WHERE VER_CD = p_VER_CD;
 	
	/* 기존 버전 시즌지수 삭제 */
	DELETE FROM TB_BF_SEASONAL_INDEX
	WHERE VER_CD = p_VER_CD;		

	COMMIT;

	INSERT INTO TB_BF_SEASONAL_INDEX
	/* 시즌지수 생성 기간 선정 */
	WITH CAL AS (
		SELECT MIN(DAT)				AS FROM_DATE
			 , MAX(DAT)				AS TO_DATE
			 , MIN(DP_WK)			AS DP_WK
			 , MIN(YYYY) 			AS YEAR
		  FROM TB_CM_CALENDAR	
	     WHERE DAT BETWEEN p_INPUT_FROM_DATE AND p_TARGET_TO_DATE
	  GROUP BY YYYY, MM, TO_CHAR(DP_WK)
	)
	/* 시즌지수 산정 대상 선정 */
	, TGT AS (
		SELECT DISTINCT ITEM_CD
		  FROM TB_BF_ITEM_ACCOUNT_MODEL_MAP
		 WHERE ACTV_YN = 'Y'
	)
	, SES_CRI AS (
		SELECT B.ITEM_CD
			 , ATTR_01 AS CRITERIA
		  FROM TB_CM_COMM_CONFIG A
		 INNER JOIN (SELECT B.LVL04_CD AS CATE_CD
		 				  , A.ITEM_CD 
		 			   FROM TGT A
		 			  INNER JOIN (SELECT DISTINCT LVL04_CD, LVL05_CD FROM TB_DPD_ITEM_HIERACHY2) B
		 			  	 ON A.ITEM_CD = B.LVL05_CD) B
		    ON A.CONF_CD = B.CATE_CD
		 WHERE CONF_GRP_CD = 'BF_WEEKLY_SEASONAL_CRITERIA'
		   AND ACTV_YN = 'Y'
 	)
	/* 시즌지수 실적 선정(예측에 사용된 실적) */
	, SA AS (
		SELECT DP_WK
	 		 , SUBSTR(DP_WK, 5,6) AS WEEK
	 		 , SUBSTR(DP_WK, 1,4) AS YEAR
			 , IH.ANCESTER_CD AS ITEM_CD
			 , SUM(QTY) AS QTY
		FROM TB_CM_ACTUAL_SALES SA
		INNER JOIN TB_DPD_ITEM_HIER_CLOSURE IH ON SA.ITEM_MST_ID = IH.ANCESTER_ID
		INNER JOIN TGT ON IH.ANCESTER_CD = TGT.ITEM_CD
		INNER JOIN CAL ON SA.BASE_DATE BETWEEN CAL.FROM_DATE AND CAL.TO_DATE
		WHERE BASE_DATE BETWEEN p_INPUT_FROM_DATE AND p_INPUT_TO_DATE
		GROUP BY DP_WK, SUBSTR(DP_WK, 5,6), YEAR, IH.ANCESTER_CD
	) 
	/* 시즌지수 예측값 선정(미래 예측값 6개월) */
	, RT AS (
		SELECT DP_WK
			 , SUBSTR(DP_WK, 5,6) AS WEEK
			 , SUBSTR(DP_WK, 1,4) AS YEAR
			 , ITEM_CD
			 , SUM(QTY) AS QTY
		  FROM TB_BF_RT_FINAL RT
  		 INNER JOIN CAL ON RT.BASE_DATE BETWEEN CAL.FROM_DATE AND CAL.TO_DATE
		 WHERE VER_CD = p_VER_CD 
		   AND BASE_DATE <= p_TARGET_TO_DATE
		 GROUP BY DP_WK, SUBSTR(DP_WK, 5,6), YEAR, ITEM_CD
	) 
	/* 과거 실적 + 미래 예측값 */
	, AGG AS (
		SELECT * FROM SA 
		UNION ALL
		SELECT * FROM RT
	)
	/* 각 주 최소일 구하기 */
	, MD AS (
		SELECT DISTINCT MIN(DP_WK) OVER (PARTITION BY ITEM_CD) AS MIN_WK
			 , ITEM_CD
		FROM AGG
	)
	/* 연도와 주 구분 */
	, AGG2 AS (
		SELECT A.DP_WK
			 , SUBSTR(A.DP_WK, 5,6) AS WEEK
			 , SUBSTR(A.DP_WK, 1,4) AS YEAR
			 , A.ITEM_CD
			 , NVL(SUM(QTY), 0) AS QTY
		FROM (SELECT DISTINCT DP_WK, ITEM_CD
				FROM CAL
			   CROSS JOIN MD WHERE CAL.DP_WK >= MD.MIN_WK) A
		LEFT JOIN AGG B
		ON A.ITEM_CD = B.ITEM_CD AND A.DP_WK = B.DP_WK
		GROUP BY A.DP_WK , A.ITEM_CD
	)
	/* 연도별 평균 */
	, YR_AVG AS (
		SELECT ITEM_CD, YEAR, AVG(QTY) AS YR_AVG
	    FROM AGG2
	   GROUP BY ITEM_CD, YEAR
	)
	/* SES1용 주별 평균*/   -- 변경 부분
	, WK_AVG AS (
		SELECT ITEM_CD, WEEK, WK_AVG, SUM(WK_AVG) OVER(PARTITION BY ITEM_CD) AS SUM_WK_AVG
		  FROM (
		  		SELECT ITEM_CD, WEEK, AVG(QTY) AS WK_AVG
		  		  FROM AGG2
		  		 GROUP BY ITEM_CD, WEEK
		  	   )  
	)		
	/* 연도/주별 실적*/
	, WY AS (
		SELECT A.ITEM_CD, A.YEAR, WEEK, CASE WHEN YR_AVG = 0 THEN 0 ELSE QTY / YR_AVG END WY_QTY
		FROM AGG2 A 
		INNER JOIN YR_AVG B ON A.ITEM_CD = B.ITEM_CD AND A.YEAR = B.YEAR
	)
	/* 주별 평균 */
	, WY_AVG AS (
		SELECT ITEM_CD, WEEK, AVG(WY_QTY) AS WY_AVG
		FROM WY
		GROUP BY ITEM_CD, WEEK
	) 
	/* 주별 시스템 시즌지수 생성 */
	, SES_1 AS (
		SELECT A.ITEM_CD
			 , WEEK
			 , WK_AVG/SUM_WK_AVG AS SES1  -- 변경 부분
			 , B.CRITERIA
			 , CASE WHEN B.CRITERIA IS NULL THEN 0
				    WHEN ROUND(WK_AVG/SUM_WK_AVG, 4) >= B.CRITERIA THEN 1 ELSE 0 END OVER_WEAK  -- 변경 부분
			 , CASE WHEN WEEK BETWEEN 1 AND 13 THEN 'Q1' 
				    WHEN WEEK BETWEEN 14 AND 26 THEN 'Q2'
				    WHEN WEEK BETWEEN 27 AND 39 THEN 'Q3'
				    ELSE 'Q4' END QUARTER
		  FROM WK_AVG A -- 변경 부분
		  INNER JOIN SES_CRI B ON A.ITEM_CD = B.ITEM_CD
	) 
	, WY_SUM AS (
		SELECT ITEM_CD, SUM(WY_AVG) AS WY_SUM
		FROM WY_AVG
		GROUP BY ITEM_CD
	) 
	/* 주별 관리 시즌지수 생성 */
	, SES_2 AS (
		SELECT A.ITEM_CD, WEEK, CASE WHEN WY_SUM = 0 THEN 0 ELSE WY_AVG / WY_SUM * 53 END SES2
		FROM WY_AVG A
		INNER JOIN WY_SUM B ON A.ITEM_CD = B.ITEM_CD
	) 
   SELECT RAWTOHEX(SYS_GUID()) AS ID
	    , p_VER_CD AS VER_CD
	    , A.ITEM_CD
		, NVL(WEEK1SES1, 0) AS WEEK1SES1
		, NVL(WEEK2SES1, 0) AS WEEK2SES1
		, NVL(WEEK3SES1, 0) AS WEEK3SES1
		, NVL(WEEK4SES1, 0) AS WEEK4SES1
		, NVL(WEEK5SES1, 0) AS WEEK5SES1
		, NVL(WEEK6SES1, 0) AS WEEK6SES1
		, NVL(WEEK7SES1, 0) AS WEEK7SES1
		, NVL(WEEK8SES1, 0) AS WEEK8SES1
		, NVL(WEEK9SES1, 0) AS WEEK9SES1
		, NVL(WEEK10SES1, 0) AS WEEK10SES1 
		, NVL(WEEK11SES1, 0) AS WEEK11SES1  
		, NVL(WEEK12SES1, 0) AS WEEK12SES1  
		, NVL(WEEK13SES1, 0) AS WEEK13SES1  
		, NVL(WEEK14SES1, 0) AS WEEK14SES1  
		, NVL(WEEK15SES1, 0) AS WEEK15SES1  
		, NVL(WEEK16SES1, 0) AS WEEK16SES1  
		, NVL(WEEK17SES1, 0) AS WEEK17SES1  
		, NVL(WEEK18SES1, 0) AS WEEK18SES1  
		, NVL(WEEK19SES1, 0) AS WEEK19SES1  
		, NVL(WEEK20SES1, 0) AS WEEK20SES1  
		, NVL(WEEK21SES1, 0) AS WEEK21SES1  
		, NVL(WEEK22SES1, 0) AS WEEK22SES1  
		, NVL(WEEK23SES1, 0) AS WEEK23SES1  
		, NVL(WEEK24SES1, 0) AS WEEK24SES1  
		, NVL(WEEK25SES1, 0) AS WEEK25SES1  
		, NVL(WEEK26SES1, 0) AS WEEK26SES1  
		, NVL(WEEK27SES1, 0) AS WEEK27SES1  
		, NVL(WEEK28SES1, 0) AS WEEK28SES1  
		, NVL(WEEK29SES1, 0) AS WEEK29SES1  
		, NVL(WEEK30SES1, 0) AS WEEK30SES1  
		, NVL(WEEK31SES1, 0) AS WEEK31SES1  
		, NVL(WEEK32SES1, 0) AS WEEK32SES1  
		, NVL(WEEK33SES1, 0) AS WEEK33SES1  
		, NVL(WEEK34SES1, 0) AS WEEK34SES1  
		, NVL(WEEK35SES1, 0) AS WEEK35SES1  
		, NVL(WEEK36SES1, 0) AS WEEK36SES1  
		, NVL(WEEK37SES1, 0) AS WEEK37SES1  
		, NVL(WEEK38SES1, 0) AS WEEK38SES1  
		, NVL(WEEK39SES1, 0) AS WEEK39SES1  
		, NVL(WEEK40SES1, 0) AS WEEK40SES1  
		, NVL(WEEK41SES1, 0) AS WEEK41SES1  
		, NVL(WEEK42SES1, 0) AS WEEK42SES1  
		, NVL(WEEK43SES1, 0) AS WEEK43SES1  
		, NVL(WEEK44SES1, 0) AS WEEK44SES1  
		, NVL(WEEK45SES1, 0) AS WEEK45SES1  
		, NVL(WEEK46SES1, 0) AS WEEK46SES1  
		, NVL(WEEK47SES1, 0) AS WEEK47SES1  
		, NVL(WEEK48SES1, 0) AS WEEK48SES1  
		, NVL(WEEK49SES1, 0) AS WEEK49SES1  
		, NVL(WEEK50SES1, 0) AS WEEK50SES1  
		, NVL(WEEK51SES1, 0) AS WEEK51SES1  
		, NVL(WEEK52SES1, 0) AS WEEK52SES1  
		, NVL(WEEK53SES1, 0) AS WEEK53SES1
		, NVL(WEEK1SES2, 0) AS WEEK1SES2
		, NVL(WEEK2SES2, 0) AS WEEK2SES2
		, NVL(WEEK3SES2, 0) AS WEEK3SES2
		, NVL(WEEK4SES2, 0) AS WEEK4SES2
		, NVL(WEEK5SES2, 0) AS WEEK5SES2
		, NVL(WEEK6SES2, 0) AS WEEK6SES2
		, NVL(WEEK7SES2, 0) AS WEEK7SES2
		, NVL(WEEK8SES2, 0) AS WEEK8SES2
		, NVL(WEEK9SES2, 0) AS WEEK9SES2
		, NVL(WEEK10SES2, 0) AS WEEK10SES2 
		, NVL(WEEK11SES2, 0) AS WEEK11SES2  
		, NVL(WEEK12SES2, 0) AS WEEK12SES2  
		, NVL(WEEK13SES2, 0) AS WEEK13SES2  
		, NVL(WEEK14SES2, 0) AS WEEK14SES2  
		, NVL(WEEK15SES2, 0) AS WEEK15SES2  
		, NVL(WEEK16SES2, 0) AS WEEK16SES2  
		, NVL(WEEK17SES2, 0) AS WEEK17SES2  
		, NVL(WEEK18SES2, 0) AS WEEK18SES2  
		, NVL(WEEK19SES2, 0) AS WEEK19SES2  
		, NVL(WEEK20SES2, 0) AS WEEK20SES2  
		, NVL(WEEK21SES2, 0) AS WEEK21SES2  
		, NVL(WEEK22SES2, 0) AS WEEK22SES2  
		, NVL(WEEK23SES2, 0) AS WEEK23SES2  
		, NVL(WEEK24SES2, 0) AS WEEK24SES2  
		, NVL(WEEK25SES2, 0) AS WEEK25SES2  
		, NVL(WEEK26SES2, 0) AS WEEK26SES2  
		, NVL(WEEK27SES2, 0) AS WEEK27SES2  
		, NVL(WEEK28SES2, 0) AS WEEK28SES2  
		, NVL(WEEK29SES2, 0) AS WEEK29SES2  
		, NVL(WEEK30SES2, 0) AS WEEK30SES2  
		, NVL(WEEK31SES2, 0) AS WEEK31SES2  
		, NVL(WEEK32SES2, 0) AS WEEK32SES2  
		, NVL(WEEK33SES2, 0) AS WEEK33SES2  
		, NVL(WEEK34SES2, 0) AS WEEK34SES2  
		, NVL(WEEK35SES2, 0) AS WEEK35SES2  
		, NVL(WEEK36SES2, 0) AS WEEK36SES2  
		, NVL(WEEK37SES2, 0) AS WEEK37SES2  
		, NVL(WEEK38SES2, 0) AS WEEK38SES2  
		, NVL(WEEK39SES2, 0) AS WEEK39SES2  
		, NVL(WEEK40SES2, 0) AS WEEK40SES2  
		, NVL(WEEK41SES2, 0) AS WEEK41SES2  
		, NVL(WEEK42SES2, 0) AS WEEK42SES2  
		, NVL(WEEK43SES2, 0) AS WEEK43SES2  
		, NVL(WEEK44SES2, 0) AS WEEK44SES2  
		, NVL(WEEK45SES2, 0) AS WEEK45SES2  
		, NVL(WEEK46SES2, 0) AS WEEK46SES2  
		, NVL(WEEK47SES2, 0) AS WEEK47SES2  
		, NVL(WEEK48SES2, 0) AS WEEK48SES2  
		, NVL(WEEK49SES2, 0) AS WEEK49SES2  
		, NVL(WEEK50SES2, 0) AS WEEK50SES2  
		, NVL(WEEK51SES2, 0) AS WEEK51SES2  
		, NVL(WEEK52SES2, 0) AS WEEK52SES2  
		, NVL(WEEK53SES2, 0) AS WEEK53SES2 
		, CASE WHEN Q1_OVER_WEAK >= 1 THEN 1 ELSE 0 END Q1_OVER_WEAK
		, CASE WHEN Q2_OVER_WEAK >= 1 THEN 1 ELSE 0 END Q2_OVER_WEAK
		, CASE WHEN Q3_OVER_WEAK >= 1 THEN 1 ELSE 0 END Q3_OVER_WEAK
		, CASE WHEN Q4_OVER_WEAK >= 1 THEN 1 ELSE 0 END Q4_OVER_WEAK
		, CASE WHEN NVL(Q1_OVER_WEAK, 0) + NVL(Q2_OVER_WEAK, 0) + NVL(Q3_OVER_WEAK, 0) + NVL(Q4_OVER_WEAK, 0) >= 1 THEN 1 ELSE 0 END RES_WEAK
		, NULL AS Q1_OVER_STRONG
		, NULL AS Q2_OVER_STRONG
		, NULL AS Q3_OVER_STRONG
		, NULL AS Q4_OVER_STRONG
		, NULL AS RES_STRONG
		, 'SYSTEM' AS CREATE_BY
		, SYSDATE AS CREATE_DTTM
		, NULL AS MODIFY_BY
		, NULL AS MODIFY_DTTM		
		, A.CRITERIA AS CRITERIA_WEAK
		, NULL AS CRITERIA_STRONG
	  FROM ( 
	  		SELECT ITEM_CD
	  			 , WEEK
	  			 , CRITERIA
	  			 , SES1
	  		  FROM SES_1
	  		)
			 PIVOT ( MAX(SES1) FOR WEEK IN ('01' AS WEEK1SES1, '02' AS WEEK2SES1, '03' AS WEEK3SES1, '04' AS WEEK4SES1, '05' AS WEEK5SES1,
											'06' AS WEEK6SES1, '07' AS WEEK7SES1, '08' AS WEEK8SES1, '09' AS WEEK9SES1, '10' AS WEEK10SES1,
											'11' AS WEEK11SES1, '12' AS WEEK12SES1, '13' AS WEEK13SES1, '14' AS WEEK14SES1, '15' AS WEEK15SES1,
											'16' AS WEEK16SES1, '17' AS WEEK17SES1, '18' AS WEEK18SES1, '19' AS WEEK19SES1, '20' AS WEEK20SES1,
											'21' AS WEEK21SES1, '22' AS WEEK22SES1, '23' AS WEEK23SES1, '24' AS WEEK24SES1, '25' AS WEEK25SES1,
											'26' AS WEEK26SES1, '27' AS WEEK27SES1, '28' AS WEEK28SES1, '29' AS WEEK29SES1, '30' AS WEEK30SES1,
											'31' AS WEEK31SES1, '32' AS WEEK32SES1, '33' AS WEEK33SES1, '34' AS WEEK34SES1, '35' AS WEEK35SES1,
											'36' AS WEEK36SES1, '37' AS WEEK37SES1, '38' AS WEEK38SES1, '39' AS WEEK39SES1, '40' AS WEEK40SES1,
											'41' AS WEEK41SES1, '42' AS WEEK42SES1, '43' AS WEEK43SES1, '44' AS WEEK44SES1, '45' AS WEEK45SES1,
											'46' AS WEEK46SES1, '47' AS WEEK47SES1, '48' AS WEEK48SES1, '49' AS WEEK49SES1, '50' AS WEEK50SES1,
											'51' AS WEEK51SES1, '52' AS WEEK52SES1, '53' AS WEEK53SES1) ) A
	 INNER JOIN 
		   ( 
		   	SELECT ITEM_CD
		   		 , WEEK
		   		 , SES2 
		      FROM SES_2
		   	)
			 PIVOT ( MAX(SES2) FOR WEEK IN ('01' AS WEEK1SES2, '02' AS WEEK2SES2, '03' AS WEEK3SES2, '04' AS WEEK4SES2, '05' AS WEEK5SES2,
											'06' AS WEEK6SES2, '07' AS WEEK7SES2, '08' AS WEEK8SES2, '09' AS WEEK9SES2, '10' AS WEEK10SES2,
											'11' AS WEEK11SES2, '12' AS WEEK12SES2, '13' AS WEEK13SES2, '14' AS WEEK14SES2, '15' AS WEEK15SES2,
											'16' AS WEEK16SES2, '17' AS WEEK17SES2, '18' AS WEEK18SES2, '19' AS WEEK19SES2, '20' AS WEEK20SES2,
											'21' AS WEEK21SES2, '22' AS WEEK22SES2, '23' AS WEEK23SES2, '24' AS WEEK24SES2, '25' AS WEEK25SES2,
											'26' AS WEEK26SES2, '27' AS WEEK27SES2, '28' AS WEEK28SES2, '29' AS WEEK29SES2, '30' AS WEEK30SES2,
											'31' AS WEEK31SES2, '32' AS WEEK32SES2, '33' AS WEEK33SES2, '34' AS WEEK34SES2, '35' AS WEEK35SES2,
											'36' AS WEEK36SES2, '37' AS WEEK37SES2, '38' AS WEEK38SES2, '39' AS WEEK39SES2, '40' AS WEEK40SES2,
											'41' AS WEEK41SES2, '42' AS WEEK42SES2, '43' AS WEEK43SES2, '44' AS WEEK44SES2, '45' AS WEEK45SES2,
											'46' AS WEEK46SES2, '47' AS WEEK47SES2, '48' AS WEEK48SES2, '49' AS WEEK49SES2, '50' AS WEEK50SES2,
											'51' AS WEEK51SES2, '52' AS WEEK52SES2, '53' AS WEEK53SES2) ) B
	 ON A.ITEM_CD = B.ITEM_CD
	 INNER JOIN 
	 	   (
	 		SELECT ITEM_CD
	 			 , QUARTER
	 			 , SUM(OVER_WEAK) AS OVER_WEAK
	 		FROM SES_1
	 		GROUP BY ITEM_CD, QUARTER
	 	   )
	 	   PIVOT ( SUM(OVER_WEAK) FOR QUARTER IN ('Q1' AS Q1_OVER_WEAK, 'Q2' AS Q2_OVER_WEAK, 'Q3' AS Q3_OVER_WEAK, 'Q4' AS Q4_OVER_WEAK) ) C
	 ON A.ITEM_CD = C.ITEM_CD
	;

	COMMIT;

--	P_RT_ROLLBACK_FLAG := 'true';
--  P_RT_MSG := 'MSG_0001';  --저장 되었습니다.

	EXCEPTION WHEN OTHERS THEN
		ROLLBACK;
	
		a := SQLCODE;
		b := SQLERRM;
		c := SYS.dbms_utility.format_error_backtrace;
	
		BEGIN
			INSERT INTO TB_SCM100M_ERR_LOG(ERR_FILE, ERR_CODE, ERR_MSG, ERR_LINE, ERR_DTTM)
			SELECT 'SP_UI_BF_00_SEASONAL_INDEX', a, b, c, SYSDATE FROM DUAL;
		
			COMMIT;
		END;         
END;