CREATE OR REPLACE PROCEDURE DWSCM."SP_UI_BF_76_Q2" (	
      p_VER_CD         VARCHAR2
    , p_ITEM_LV        VARCHAR2 := NULL -- id 로 넘어옴 
    , p_ITEM_CD        VARCHAR2 := NULL
    , p_SALES_LV       VARCHAR2 := NULL
    , p_SALES_CD       VARCHAR2 := NULL  
    , p_SRC_TP		   VARCHAR2 := NULL
    , pRESULT          OUT SYS_REFCURSOR
)IS 
  /**************************************************************************
   * Copyrightⓒ2023 ZIONEX, All rights reserved.
   **************************************************************************
   * Name : SP_UI_BF_76_Q2
   * Purpose : 예측정확도(등급별) 조회 (ABC XYZ 등급별 정확도)
   * Notes : 
   *    - 예측 시작일부터 실적이 존재하는 일자까지 정확도 조회
   *    - 소분류 이상부터 조회
   * 	M20180115092445697M411878346346N	ITEM_ALL	상품전체
   *	N20180115092528519N506441512113N	LEVEL1		대분류
   *	N20180115092559329M499525073971N	LEVEL2		중분류
   *	FA5FEBBCADDED90DE053DD0A10AC8DB5	LEVEL3		소분류
   *	N20180115092712856O251735022591O	ALL			채널전체
   *	FE00001E54F88F3FE053DD0A10AC762B	CENTER		센터
   *	N20180115092710840N520475678180O	CHANNEL		채널선택
   **************************************************************************/
/*
DECLARE
    pRESULT SYS_REFCURSOR;
BEGIN
    DWSCM.SP_UI_BF_76_Q2('BF-20230828-01', 'FA5FEBBCADDED90DE053DD0A10AC8DB5', 'AC01', 'N20180115092710840N520475678180O', '', '', pRESULT);
    DWSCM.SP_UI_BF_76_Q2('BF-20230828-01', 'FA5FEBBCADDED90DE053DD0A10AC8DB5', 'AC01', 'FE00001E54F88F3FE053DD0A10AC762B', '01', '', pRESULT);
    DBMS_SQL.RETURN_RESULT(pRESULT);
END;
 */
	v_SRC_TP		VARCHAR2(10) := NVL(p_SRC_TP, '');
    p_FROM_DATE     DATE := NULL;
    p_TO_DATE     	DATE := NULL;

BEGIN

    SELECT MAX(TARGET_FROM_DATE)
      INTO p_FROM_DATE
      FROM TB_BF_CONTROL_BOARD_VER_DTL 
     WHERE VER_CD = p_VER_CD;
    
    SELECT TRUNC(SYSDATE, 'IW') - 7 INTO p_TO_DATE FROM DUAL;    
	   	
   	OPEN pRESULT FOR  
	WITH IDS AS (
	    SELECT IH.DESCENDANT_ID AS DESC_ID
	         , IH.DESCENDANT_CD AS DESC_CD
	         , IH.DESCENDANT_NM AS DESC_NM
	         , IH.ANCESTER_CD   AS ANCS_CD
	         , IL.ITEM_LV_NM    AS ANCS_NM
	         , IM.ATTR_03		AS SRC_TP
	      FROM TB_DPD_ITEM_HIER_CLOSURE IH
	     INNER JOIN TB_CM_ITEM_LEVEL_MGMT IL 
	        ON IH.ANCESTER_ID = IL.ID
	     INNER JOIN TB_CM_ITEM_MST IM 
	        ON IH.DESCENDANT_CD = IM.ITEM_CD
	     WHERE 1=1
	       AND IL.LV_MGMT_ID = p_ITEM_LV
	       AND IH.LEAF_YN = 'Y'
	       AND ANCESTER_CD = p_ITEM_CD  
	       AND IM.ATTR_03 LIKE v_SRC_TP||'%'
	    )
	, ADS AS (
	    SELECT SH.DESCENDANT_ID AS DESC_ID
	         , SH.DESCENDANT_CD AS DESC_CD
	         , SH.DESCENDANT_NM AS DESC_NM
	         , SH.ANCESTER_CD   AS ANCS_CD
	         , SL.SALES_LV_NM   AS ANCS_NM
	      FROM TB_DPD_SALES_HIER_CLOSURE SH
	     INNER JOIN TB_DP_SALES_LEVEL_MGMT SL 
	        ON SH.ANCESTER_ID = SL.ID 
	     WHERE 1=1
	       AND SL.LV_MGMT_ID = p_SALES_LV
	       AND SH.LEAF_YN = 'Y' 
	       AND ANCESTER_CD = p_SALES_CD  
	     UNION ALL
	    SELECT SH.DESCENDANT_ID AS DESC_ID
	         , SH.DESCENDANT_CD AS DESC_CD
	         , SH.DESCENDANT_NM AS DESC_NM
	         , SH.ANCESTER_CD   AS ANCS_CD
	         , AM.ACCOUNT_NM    AS ANCS_NM
	      FROM TB_DPD_SALES_HIER_CLOSURE SH
	     INNER JOIN TB_DP_ACCOUNT_MST AM 
	        ON SH.ANCESTER_ID = AM.ID
	     WHERE 1=1
	       AND SH.LEAF_YN = 'Y'
	       AND 1 = CASE WHEN EXISTS (SELECT 1 FROM TB_DP_SALES_LEVEL_MGMT WHERE LV_MGMT_ID = p_SALES_LV) THEN 0 ELSE 1 END
	       AND ANCESTER_CD = p_SALES_CD  
	) 
	, RT AS (
		SELECT I.ANCS_CD 	AS ITEM_LV_CD
			 , I.ANCS_NM 	AS ITEM_LV_NM
			 , I.DESC_CD 	AS ITEM_CD
			 , A.ANCS_CD 	AS ACCOUNT_CD
			 , A.ANCS_NM 	AS ACCOUNT_NM
			 , BASE_DATE
			 , ENGINE_GRADE AS GRADE
			 , SUM(NVL(QTY_ADJ, QTY)) AS QTY 
		  FROM TB_BF_RT_FINAL_ADJ RT
		 INNER JOIN IDS I
		    ON RT.ITEM_CD = I.DESC_CD
		 INNER JOIN ADS A 
		    ON RT.ACCOUNT_CD = A.DESC_CD
		 INNER JOIN TB_SCM100M_ITEM_GRADE C
		 	ON RT.ITEM_CD = C.ITEM_CD
		   AND RT.VER_CD = C.VER_CD
		 WHERE RT.VER_CD = p_VER_CD
		   AND BASE_DATE BETWEEN p_FROM_DATE AND p_TO_DATE	  	 
		 GROUP BY I.ANCS_CD, I.ANCS_NM, I.DESC_CD, A.ANCS_CD, A.ANCS_NM, BASE_DATE, ENGINE_GRADE
	)
	, SA AS (
		SELECT I.DESC_CD AS ITEM_CD
			 , A.ANCS_CD AS ACCOUNT_CD
			 , BASE_DATE
			 , SUM(QTY)  AS QTY
		  FROM TB_CM_ACTUAL_SALES_FCST SA
		 INNER JOIN IDS I
		    ON SA.ITEM_MST_ID = I.DESC_ID
		 INNER JOIN ADS A
		    ON SA.ACCOUNT_ID = A.DESC_ID	 
		 WHERE VER_CD = p_VER_CD
		 GROUP BY I.DESC_CD, A.ANCS_CD, BASE_DATE
	) 
	, AGG AS (
		SELECT ITEM_LV_CD
			 , ITEM_LV_NM
			 , ACCOUNT_CD
			 , ACCOUNT_NM
			 , GRADE
			 , ROUND(AVG(WAPE), 2) AS WAPE
		  FROM (SELECT ITEM_LV_CD
					 , ITEM_LV_NM
					 , ITEM_CD
					 , ACCOUNT_CD
					 , ACCOUNT_NM
					 , GRADE
					 , CASE WHEN SUM(ERR) = 0 THEN 100 
			         		ELSE (CASE WHEN (1-SUM(ERR)/SUM(ACT_SALES)) >= 0 THEN (1-SUM(ERR)/SUM(ACT_SALES))*100 ELSE 0 END) END WAPE
			      FROM (SELECT RT.ITEM_LV_CD
							 , RT.ITEM_LV_NM
							 , RT.ITEM_CD
							 , RT.ACCOUNT_CD
							 , RT.ACCOUNT_NM
							 , RT.GRADE
							 , ABS(RT.QTY - NVL(SA.QTY, 0)) AS ERR
							 , NVL(SA.QTY, 0) + 0.00001 	AS ACT_SALES
						  FROM RT 
						  LEFT JOIN SA 
						    ON RT.ITEM_CD = SA.ITEM_CD
						   AND RT.ACCOUNT_CD = SA.ACCOUNT_CD
						   AND RT.BASE_DATE = SA.BASE_DATE)
			     GROUP BY ITEM_LV_CD, ITEM_LV_NM, ITEM_CD, ACCOUNT_CD, ACCOUNT_NM, GRADE)
	 	  GROUP BY ITEM_LV_CD, ITEM_LV_NM, ACCOUNT_CD, ACCOUNT_NM, GRADE
	) 
	, CNT AS (
		SELECT A.ITEM_LV_CD
			 , A.ACCOUNT_CD
			 , AX_C
			 , AY_C
			 , AZ_C
			 , BX_C
			 , BY_C
			 , BZ_C
			 , CX_C
			 , CY_C
			 , CZ_C
		  FROM (SELECT ITEM_LV_CD
		  			 , ACCOUNT_CD
		  			 , GRADE
		  			 , COUNT(*) AS CNT
		  		  FROM (SELECT DISTINCT ITEM_CD
				  			 , ITEM_LV_CD
							 , ACCOUNT_CD
							 , GRADE
						  FROM RT)
				 GROUP BY ITEM_LV_CD, ACCOUNT_CD, GRADE)
		 PIVOT ( AVG(CNT) FOR GRADE IN  ('AX' AS AX_C, 'AY' AS AY_C, 'AZ' AS AZ_C, 
		 								 'BX' AS BX_C,	'BY' AS BY_C, 'BZ' AS BZ_C, 
		  								 'CX' AS CX_C, 'CY' AS CY_C, 'CZ' AS CZ_C)) A
	)
		SELECT A.ITEM_LV_NM
			 , A.ACCOUNT_NM
			 , CASE WHEN AX IS NULL THEN NULL
			 		ELSE AX||'%('||AX_C||'개)' END AS AX
			 , CASE WHEN AY IS NULL THEN NULL
			 		ELSE AY||'%('||AY_C||'개)' END AS AY
			 , CASE WHEN AZ IS NULL THEN NULL
			 		ELSE AZ||'%('||AZ_C||'개)' END AS AZ
			 , CASE WHEN BX IS NULL THEN NULL
			 		ELSE BX||'%('||BX_C||'개)' END AS BX
			 , CASE WHEN "BY" IS NULL THEN NULL
			 		ELSE "BY"||'%('||BY_C||'개)' END AS "BY"
			 , CASE WHEN BZ IS NULL THEN NULL
			 		ELSE BZ||'%('||BZ_C||'개)' END AS BZ
			 , CASE WHEN CX IS NULL THEN NULL
			 		ELSE CX||'%('||CX_C||'개)' END AS CX
			 , CASE WHEN CY IS NULL THEN NULL 
				    ELSE CY||'%('||CY_C||'개)' END AS CY
			 , CASE WHEN CZ IS NULL THEN NULL
			 		ELSE CZ||'%('||CZ_C||'개)' END AS CZ
		 FROM (SELECT ITEM_LV_CD
				   , ITEM_LV_NM
				   , ACCOUNT_CD
				   , ACCOUNT_NM
				   , GRADE
				   , WAPE
			    FROM AGG)
		PIVOT ( AVG(WAPE) FOR GRADE IN ('AX' AS AX, 'AY' AS AY, 'AZ' AS AZ,
										'BX' AS BX, 'BY' AS "BY", 'BZ' AS BZ, 
										'CX' AS CX, 'CY' AS CY, 'CZ' AS CZ) )A
		INNER JOIN CNT C
		   ON A.ITEM_LV_CD = C.ITEM_LV_CD
		  AND A.ACCOUNT_CD = C.ACCOUNT_CD;
   
END;