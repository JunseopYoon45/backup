CREATE OR REPLACE PROCEDURE DWSCM.SP_UI_MP_19_S4_J (
     P_JSON						CLOB
    ,P_T_VERSION_ID				IN VARCHAR2 := NULL
    ,P_USER_ID					IN VARCHAR2 := NULL
    ,P_RT_ROLLBACK_FLAG	        OUT VARCHAR2
    ,P_RT_MSG				    OUT VARCHAR2
)
IS
    P_ERR_STATUS    NUMBER := 0;
    P_ERR_MSG       VARCHAR2(4000) := '';
    V_MAP_ID        VARCHAR2(100) := NULL;
   	v_LOCAT_ID		VARCHAR2(100) := '';
   	P_DMND_ID		VARCHAR2(100); 		
    v_ACCOUNT_ID	VARCHAR2(100) := '';
    v_ITEM_ID		VARCHAR2(100) := '';
    
BEGIN
	
--	
--	P_ERR_MSG := 'MSG_0006';
--    IF P_ITEM_MST_ID IS NULL THEN RAISE_APPLICATION_ERROR(-20012, P_ERR_MSG); END IF;
--    IF P_ACCOUNT_ID IS NULL THEN RAISE_APPLICATION_ERROR(-20012, P_ERR_MSG); END IF;
--    IF P_DMND_QTY IS NULL THEN RAISE_APPLICATION_ERROR(-20012, P_ERR_MSG); END IF;
--    IF P_DUE_DATE IS NULL THEN RAISE_APPLICATION_ERROR(-20012, P_ERR_MSG); END IF;
--
--    P_ERR_MSG :='MSG_0008';
--    IF NVL(P_DMND_QTY, 0) < 0 THEN RAISE_APPLICATION_ERROR(-20012, P_ERR_MSG); END IF;

    SELECT TO_NUMBER(REGEXP_SUBSTR(MAX(DMND_ID),'[0-9]+$')) INTO P_DMND_ID 
	  FROM TB_CM_DEMAND_OVERVIEW 
	 WHERE T3SERIES_VER_ID = P_T_VERSION_ID;  
   
--	SELECT B.ID AS ITEM_MST_ID
--		 , C.ID AS ACCOUNT_ID
--	  INTO v_ITEM_ID
--	  	 , v_ACCOUNT_ID
--	  FROM (SELECT CAST(ITEM_CD AS VARCHAR2(100))    AS ITEM_CD
--		    	 , CAST(ACCOUNT_CD AS VARCHAR2(100)) AS ACCOUNT_CD
--		      FROM JSON_TABLE( P_JSON, '$[*]'
--		    			COLUMNS (  ITEM_CD	   PATH '$.ITEM_CD'
--								 , ACCOUNT_CD  PATH '$.ACCOUNT_CD'))) A
--	 INNER JOIN TB_CM_ITEM_MST B
--	    ON A.ITEM_CD = B.ITEM_CD
--	 INNER JOIN TB_DP_ACCOUNT_MST C
--	 	ON A.ACCOUNT_CD = C.ACCOUNT_CD;
--			
--	
--	SELECT CASE WHEN v_ACCOUNT_ID = 'FAAFC6B5FB42CDFEE053DD0A10ACA2F2' THEN 'FC7C4049D2372BFCE053DD0A10AC6D54'
--				WHEN v_ACCOUNT_ID = 'D20230614200054265D811881586718D' THEN 'FB2A45875DD4D911E053DD0A10AC50BC'
--				WHEN v_ACCOUNT_ID = 'FAAFC6B5FB45CDFEE053DD0A10ACA2F2' THEN 'FC7C4049D2392BFCE053DD0A10AC6D54'
--				WHEN v_ACCOUNT_ID = 'E20230614200238462D556312186289W' THEN 'FB2A45875DD5D911E053DD0A10AC50BC'
--				WHEN v_ACCOUNT_ID = 'FAAFC6B5FB41CDFEE053DD0A10ACA2F2' THEN 'FC7C4049D23B2BFCE053DD0A10AC6D54'
--				WHEN v_ACCOUNT_ID = 'D20230614200304107E289930099587E' THEN 'FB2A45875DD3D911E053DD0A10AC50BC' END INTO v_LOCAT_ID 
--	  FROM DUAL;
--	 
--	SELECT A.ID INTO V_MAP_ID -- 23.12.21 YJS TB_CM_SITE_ITEM 에 존재하는 상품만 수요개요 추가 가능
--	  FROM TB_IM_INV_POLICY_ITEM A
-- 	 INNER JOIN TB_CM_SITE_ITEM B
--		ON A.LOCAT_ITEM_ID = B.ID
--	 INNER JOIN TB_CM_LOC_MGMT C
--		ON B.LOCAT_MGMT_ID = C.ID 
--	 WHERE B.ITEM_MST_ID = v_ITEM_ID
--	   AND C.LOCAT_ID = v_LOCAT_ID	   
--	   AND A.ACTV_YN = 'Y'
--	   AND B.ACTV_YN = 'Y'
--	   AND C.ACTV_YN = 'Y';
--		
--    P_ERR_MSG :='MSG_5016';
--    IF(V_MAP_ID IS NULL OR v_LOCAT_ID IS NULL) THEN RAISE_APPLICATION_ERROR(-20012, P_ERR_MSG); END IF;
        

    MERGE INTO TB_CM_DEMAND_OVERVIEW A USING (
	WITH JS AS (
		 SELECT B.ID AS ITEM_MST_ID
		 	  , B.ITEM_CD
		 	  , C.ID AS ACCOUNT_ID
		 	  , C.ACCOUNT_CD
		 	  , DUE_DATE
		 	  , DMND_QTY	 	  
		   FROM (SELECT CAST(ITEM_CD AS VARCHAR2(100))    AS ITEM_CD
			    	  , CAST(ACCOUNT_CD AS VARCHAR2(100)) AS ACCOUNT_CD
			    	  , TO_DATE(DUE_DATE, 'YYYY-MM-DD')   AS DUE_DATE
					  , CAST(DMND_QTY AS NUMBER(20,3))    AS DMND_QTY				  
			       FROM JSON_TABLE( P_JSON, '$[*]'
			    			COLUMNS (
										ITEM_CD		PATH '$.ITEM_CD'
									  , ACCOUNT_CD  PATH '$.ACCOUNT_CD'
									  , DUE_DATE  	PATH '$.DUE_DATE'
									  , DMND_QTY 	PATH '$.DMND_QTY'
			    					)
			    			)
			    ) A
		     INNER JOIN TB_CM_ITEM_MST B
		        ON A.ITEM_CD = B.ITEM_CD
		     INNER JOIN TB_DP_ACCOUNT_MST C
		     	ON A.ACCOUNT_CD = C.ACCOUNT_CD
	)   SELECT TO_SINGLE_BYTE(SYS_GUID())                                               AS ID
			 , 'DP'                                                                     AS MODULE_VAL
	         , P_T_VERSION_ID                                                           AS T3SERIES_VER_ID
	         , 'Y'                                                                      AS CONFRM_YN
	         , 'Y'                                                                      AS FINAL_CONFRM_YN
	         , 'DMND_' || LPAD((ROW_NUMBER() OVER (ORDER BY A1.ITEM_MST_ID,A1.ACCOUNT_ID,DUE_DATE) + P_DMND_ID),15,'0') AS DMND_ID
	         , '4A75B460404C407E8C2B18A92167686E'                                       AS DMND_TP_ID 
	         , A1.ITEM_MST_ID
	         , DMND_QTY
	         , '10DAF67FED0F41459216FAD276BD5006' AS UOM_ID
	         , DUE_DATE
			 , A3.ID                                                                    AS REQUEST_SITE_ID
			 , A1.ACCOUNT_ID
			 , A4.ATTR_01 																AS SALES_UNIT_PRIC 
			 , A2.CURCY_ID 																AS CURCY_CD_ID
			 , (SELECT ID FROM TB_CM_COMM_CONFIG WHERE CONF_GRP_CD = 'CM_BASE_ORD_DELIV_POLICY'
	               AND DEFAT_VAL = 'Y'           
	           )                                                                        AS DELIVY_PLAN_POLICY_CD_ID
	         , (SELECT CONF_CD  FROM TB_CM_COMM_CONFIG
	             WHERE CONF_GRP_CD = 'MP_BASE_EFFCIENCY')                               AS EFFICY
	         , (SELECT CASE WHEN CONF_CD = 'TRUE' then 'Y' else 'N'  end FROM TB_CM_COMM_CONFIG
	             WHERE CONF_GRP_CD = 'MP_ORD_PARTIAL_PLN')                              AS PARTIAL_PLAN_YN
	         , (SELECT (CASE WHEN CONF_CD = 'TRUE' then 'Y' else 'N'  end) FROM TB_CM_COMM_CONFIG
	             WHERE CONF_GRP_CD = 'CM_ORD_ROUT_COST_OPT')                            AS COST_OPTIMIZ_YN
	         , 'Y'                                                                      AS ACTV_YN
	         , P_USER_ID AS CREATE_BY
	         , SYSDATE AS CREATE_DTTM
	   FROM JS A1
	  INNER JOIN TB_DPD_ACCOUNT_HIERACHY2 A2
	     ON A2.LVL03_ID = A1.ACCOUNT_ID 
	  INNER JOIN TB_CM_LOC_DTL A3
	     ON A3.LOCAT_CD = CASE WHEN A2.ACCOUNT_CD LIKE '%POS' THEN '0'||A2.LVL02_CD ELSE A2.LVL02_CD END
	  INNER JOIN TB_CM_ITEM_MST A4
	 	 ON A1.ITEM_CD = A4.ITEM_CD
	 ) B ON (A.T3SERIES_VER_ID = B.T3SERIES_VER_ID AND A.ITEM_MST_ID = B.ITEM_MST_ID AND A.ACCOUNT_ID = B.ACCOUNT_ID AND A.DUE_DATE = B.DUE_DATE)
	WHEN MATCHED THEN 
	UPDATE SET A.DMND_QTY = B.DMND_QTY, A.MODIFY_BY = P_USER_ID, A.MODIFY_DTTM = SYSDATE
	WHEN NOT MATCHED THEN
	INSERT (ID, MODULE_VAL, T3SERIES_VER_ID, CONFRM_YN, 
			FINAL_CONFRM_YN, DMND_ID, DMND_TP_ID, ACCOUNT_ID, 
			ITEM_MST_ID, DMND_QTY, UOM_ID, DUE_DATE, REQUEST_SITE_ID, 
			EFFICY, SALES_UNIT_PRIC, CURCY_CD_ID, DELIVY_PLAN_POLICY_CD_ID, 
			PARTIAL_PLAN_YN, COST_OPTIMIZ_YN, ACTV_YN, CREATE_BY, CREATE_DTTM) 
	VALUES (B.ID, B.MODULE_VAL, B.T3SERIES_VER_ID, B.CONFRM_YN, 
			B.FINAL_CONFRM_YN, B.DMND_ID, B.DMND_TP_ID, B.ACCOUNT_ID,
			B.ITEM_MST_ID, B.DMND_QTY, B.UOM_ID, B.DUE_DATE, B.REQUEST_SITE_ID, 
			B.EFFICY, B.SALES_UNIT_PRIC, B.CURCY_CD_ID, B.DELIVY_PLAN_POLICY_CD_ID, 
			B.PARTIAL_PLAN_YN, B.COST_OPTIMIZ_YN, B.ACTV_YN, B.CREATE_BY, B.CREATE_DTTM);
	
    P_RT_ROLLBACK_FLAG := 'true';
    P_RT_MSG := 'MSG_0001';
    
   EXCEPTION
    WHEN OTHERS THEN     
        P_RT_ROLLBACK_FLAG := 'false';
        IF(SQLCODE = -20012)
        THEN
              P_RT_MSG := P_ERR_MSG;   
          ELSE
              P_RT_MSG := SQLERRM;
          END IF;
END;