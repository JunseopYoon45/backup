CREATE OR REPLACE PROCEDURE DWSCM."SP_UI_BF_00_FACTOR_MA" (
		P_RT_ROLLBACK_FLAG			OUT VARCHAR2   
      , P_RT_MSG					OUT VARCHAR2
)
IS
  /**************************************************************************
   * Copyrightⓒ2023 ZIONEX, All rights reserved.
   **************************************************************************
   * Name : SP_UI_BF_00_FACTOR_MA
   * Purpose : 다변량 인자 생성
   * Notes :
   **************************************************************************/
	P_ERR_STATUS INT := 0;
	P_ERR_MSG VARCHAR2(4000) :='';
	a VARCHAR2(20);
	b VARCHAR2(200);
	c VARCHAR2(50);
	
BEGIN

MERGE INTO TB_BF_DATE_FACTOR_MA A USING (
	/*  */
	WITH STORE_CNT AS (
		SELECT YYYYMM
			 , FACTOR1
			 , FACTOR2
			 , FACTOR3
			 , FACTOR4
			 , FACTOR5
			 , FACTOR6
			 , FACTOR7
			 , FACTOR8
			 , FACTOR9
			 , FACTOR10
			 , FACTOR11
			 , FACTOR12
		  FROM (
		    /* 기존 매장 수 + 오픈/폐점 예정 매장 수 합 */
			SELECT A.YYYYMM
				 , A.P_GBN
				 , NVL(A.C_SHOP, B.C_SHOP + C.C_SHOP) AS C_SHOP
				FROM (
					/* 평형대 별 매장 수 */
					SELECT YYYYMM
						 , P_GBN
						 , SUM(C_SHOP) AS C_SHOP
					  FROM (
					  	  /* 기존 매장 수 집계 */
						  SELECT YYYYMM
						   	   , P_GBN
						 	   , SUM(C_SHOP) AS C_SHOP 
					 	    FROM DS_TB_IF_SALESPLAN_SHOP
						   GROUP BY YYYYMM, P_GBN
						   UNION ALL
--						  SELECT DISTINCT YYYYMM
--							   , P_GBN
--							   , NULL 
--						    FROM DS_TB_IF_SALESPLAN_SHOPPLAN
						  SELECT DISTINCT B.YYYYMM
							   , P_GBN
							   , NULL 
						    FROM DS_TB_IF_SALESPLAN_SHOPPLAN A
						   CROSS JOIN (SELECT DISTINCT YYYYMM
						FROM TB_CM_CALENDAR
						WHERE DAT BETWEEN TRUNC(SYSDATE, 'MM') AND ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 12)) B  
					  	   ) 
					 GROUP BY YYYYMM, P_GBN
					 ) A
			   INNER JOIN (
			   			/* 기존 매장 수 */
						SELECT YYYYMM
						 	 , P_GBN
						 	 , SUM(C_SHOP) AS C_SHOP 
					 	  FROM DS_TB_IF_SALESPLAN_SHOP
					 	 WHERE YYYYMM = TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1), 'YYYYMM')
--					 	 WHERE YYYYMM = 202309
						 GROUP BY YYYYMM, P_GBN
						  ) B 
				ON A.P_GBN = B.P_GBN
			   LEFT JOIN (
			   			/* 오픈/폐점 예정 매장 수 집계 */
						SELECT YYYYMM
							 , P_GBN
							 , SUM(C_SHOP) OVER (PARTITION BY P_GBN ORDER BY YYYYMM) AS C_SHOP 
						  FROM (
								SELECT YYYYMM
									 , P_GBN
									 , NVL(SUM(C_SHOPCOD), 0) AS C_SHOP 
								  FROM (
										SELECT B.YYYYMM
											 , B.P_GBN
											 , CASE WHEN B.GBN = 'OPN_MM' THEN NVL(A.COUNT_SHOPCOD, 0) ELSE NVL(-A.COUNT_SHOPCOD, 0) END C_SHOPCOD 
										  FROM DS_TB_IF_SALESPLAN_SHOPPLAN A
										 RIGHT JOIN (SELECT DISTINCT B.YYYYMM
													  	  , A.P_GBN
													  	  , C.GBN
													   FROM DS_TB_IF_SALESPLAN_SHOPPLAN A
													  CROSS JOIN (SELECT DISTINCT YYYYMM
																    FROM TB_CM_CALENDAR
																   WHERE DAT BETWEEN TRUNC(SYSDATE, 'MM') AND ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 12)) B
												 	  CROSS JOIN (SELECT DISTINCT GBN FROM DS_TB_IF_SALESPLAN_SHOPPLAN) C
													 ) B 
										    ON A.YYYYMM = B.YYYYMM AND A.P_GBN = B.P_GBN AND A.GBN = B.GBN
									   ) -- DIST_DIV 추가필요
								 WHERE YYYYMM >= TO_CHAR(TRUNC(SYSDATE, 'MM'), 'YYYYMM')
								 GROUP BY YYYYMM, P_GBN
							    )
						 ) C
				ON A.YYYYMM = C.YYYYMM AND A.P_GBN = C.P_GBN
				)
		PIVOT (MAX(C_SHOP) FOR P_GBN IN ('1' AS FACTOR1, '2' AS FACTOR2, '3' AS FACTOR3, '4' AS FACTOR4, 
		 								 '5' AS FACTOR5, '6' AS FACTOR6, '7' AS FACTOR7, '8' AS FACTOR8,
		 								 '9' AS FACTOR9, '10' AS FACTOR10, '11' AS FACTOR11 , '12' AS FACTOR12) )
	) 
	, CAL AS (
		SELECT DAT
			 , YYYYMM
		  FROM TB_CM_CALENDAR
		 WHERE DAT BETWEEN '2020-01-01' AND '2100-12-31'
	)
	/* 매장 객수 */
	, GUEST AS (
		SELECT YYYYMM
			 , AVG_CUS_CNT AS A_CNT
			 , P_GBN
		  FROM DS_TB_IF_SALESPLAN_GUEST
	)
	/* 월 평균, 평형대 별 평균 매장 객수 */
	, M_GUEST AS (
		SELECT SUBSTR(YYYYMM, 5,6) AS MM
			 , P_GBN
			 , ROUND(AVG(AVG_CUS_CNT)) AS M_CNT
		  FROM DS_TB_IF_SALESPLAN_GUEST
		 GROUP BY SUBSTR(YYYYMM, 5,6), P_GBN
	) 
	/* 미래 평균 매장 객수 */
	, PRD AS (
		SELECT B.YYYYMM
			 , P_GBN
		  FROM (
			    SELECT DISTINCT P_GBN FROM GUEST
			   ) A
		 CROSS JOIN (
			   SELECT DISTINCT YYYYMM 
			   	 FROM TB_CM_CALENDAR 
			   	WHERE DAT BETWEEN TRUNC(SYSDATE, 'MM') AND ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 12)
			   		) B
	)
	/* 기존 매장 객수 + 미래 평균 매장 객수 */
	, AGG_GUEST AS (
		SELECT YYYYMM, P_GBN, A_CNT 
		  FROM GUEST
		 UNION ALL
		SELECT YYYYMM, M.P_GBN, M_CNT AS A_CNT
		  FROM M_GUEST M
		 INNER JOIN PRD P ON M.MM = SUBSTR(P.YYYYMM, 5,6) AND M.P_GBN = P.P_GBN
	) 
	, GUEST_CNT AS (
		SELECT YYYYMM
			 , FACTOR13
			 , FACTOR14
			 , FACTOR15
			 , FACTOR16
			 , FACTOR17
			 , FACTOR18
			 , FACTOR19
			 , FACTOR20
			 , FACTOR21
			 , FACTOR22
			 , FACTOR23
			 , FACTOR24
	 	  FROM (
			SELECT YYYYMM
				 , P_GBN
				 , A_CNT
			  FROM AGG_GUEST A
		 	 	)
		 PIVOT (MAX(A_CNT) FOR P_GBN IN ('1' AS FACTOR13, '2' AS FACTOR14, '3' AS FACTOR15, '4' AS FACTOR16
		 							   , '5' AS FACTOR17, '6' AS FACTOR18, '7' AS FACTOR19, '8' AS FACTOR20
		 							   , '9' AS FACTOR21, '10' AS FACTOR22, '11' AS FACTOR23, '12' AS FACTOR24) )
	)
	SELECT RAWTOHEX(SYS_GUID()) AS ID
		 , A.DAT AS BASE_DATE
		 , FACTOR1
		 , FACTOR2
		 , FACTOR3
		 , FACTOR4
		 , FACTOR5
		 , FACTOR6
		 , FACTOR7
		 , FACTOR8
		 , FACTOR9
		 , FACTOR10
		 , FACTOR11
		 , FACTOR12
		 , FACTOR13
		 , FACTOR14
		 , FACTOR15
		 , FACTOR16
		 , FACTOR17
		 , FACTOR18
		 , FACTOR19
		 , FACTOR20
		 , FACTOR21
		 , FACTOR22
		 , FACTOR23
		 , FACTOR24
	  FROM CAL A
	  LEFT JOIN STORE_CNT B ON A.YYYYMM = B.YYYYMM
	  INNER JOIN GUEST_CNT C ON B.YYYYMM = C.YYYYMM) B
	  ON (A.BASE_DATE = B.BASE_DATE)
		WHEN MATCHED THEN 
		UPDATE SET A.FACTOR1 = B.FACTOR1, A.FACTOR2 = B.FACTOR2, A.FACTOR3 = B.FACTOR3, A.FACTOR4 = B.FACTOR4, 
				   A.FACTOR5 = B.FACTOR5, A.FACTOR6 = B.FACTOR6, A.FACTOR7 = B.FACTOR7, A.FACTOR8 = B.FACTOR8,
				   A.FACTOR9 = B.FACTOR9, A.FACTOR10 = B.FACTOR10, A.FACTOR11 = B.FACTOR11, A.FACTOR12 = B.FACTOR12, 
				   A.FACTOR13 = B.FACTOR13, A.FACTOR14 = B.FACTOR14, A.FACTOR15 = B.FACTOR15, A.FACTOR16 = B.FACTOR16,
				   A.FACTOR17 = B.FACTOR17, A.FACTOR18 = B.FACTOR18, A.FACTOR19 = B.FACTOR19, A.FACTOR20 = B.FACTOR20,
				   A.FACTOR21 = B.FACTOR21, A.FACTOR22 = B.FACTOR22, A.FACTOR23 = B.FACTOR23, A.FACTOR24 = B.FACTOR24,
				   A.MODIFY_BY = 'SYSTEM', A.MODIFY_DTTM = SYSDATE
		WHEN NOT MATCHED THEN
		INSERT (ID, BASE_DATE, 
				FACTOR1, FACTOR2, FACTOR3, FACTOR4, FACTOR5, FACTOR6, FACTOR7, FACTOR8, FACTOR9, FACTOR10, 
				FACTOR11, FACTOR12, FACTOR13, FACTOR14, FACTOR15, FACTOR16, FACTOR17, FACTOR18, FACTOR19, FACTOR20, 
				FACTOR21, FACTOR22, FACTOR23, FACTOR24,
				CREATE_BY, CREATE_DTTM) 
		VALUES (B.ID, B.BASE_DATE, 
				B.FACTOR1, B.FACTOR2, B.FACTOR3, B.FACTOR4, B.FACTOR5, B.FACTOR6, B.FACTOR7, B.FACTOR8, B.FACTOR9, B.FACTOR10, 
				B.FACTOR11, B.FACTOR12, B.FACTOR13, B.FACTOR14, B.FACTOR15, B.FACTOR16, B.FACTOR17, B.FACTOR18, B.FACTOR19, B.FACTOR20, 
				B.FACTOR21, B.FACTOR22, B.FACTOR23, B.FACTOR24,
				'SYSTEM', SYSDATE);
COMMIT;

MERGE INTO TB_BF_SALES_FACTOR_MA A USING (
		WITH ITEM_CNT AS (
		SELECT YYYYMM
		  	 , DIV_COD 		AS CATE_CD
			 , CATE_FACTOR1
			 , CATE_FACTOR2
			 , CATE_FACTOR3
			 , CATE_FACTOR4
			 , CATE_FACTOR5
			 , CATE_FACTOR6
		  FROM (
			SELECT A.YYYYMM
				 , A.DIV_COD
				 , A.SALE_PRC
				 , NVL(A.C_GDSNUM, B.C_GDSNUM+NVL(C.C_GDSNUM, 0)) AS C_GDSNUM
			  FROM (
					SELECT IO_YYYYMM AS YYYYMM
						 , DIV_COD
						 , SALE_PRC
						 , NVL(C_GDSNUM, 0) AS C_GDSNUM
					  FROM DS_TB_IF_SALESPLAN_GDS A
					 WHERE IO_YYYYMM < TO_CHAR(TRUNC(SYSDATE, 'MM'), 'YYYYMM')
					 UNION ALL
					SELECT DISTINCT B.YYYYMM
				  	     , DIV_COD
				  	     , SALE_PRC
					 	 , NULL 
				 	  FROM DS_TB_IF_SALESPLAN_GDS A
				     CROSS JOIN (
				     			 SELECT DISTINCT YYYYMM
								   FROM TB_CM_CALENDAR
								  WHERE DAT BETWEEN ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1) AND ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 12) 
								) B
					) A
			 INNER JOIN (
						SELECT IO_YYYYMM AS YYYYMM
						 	 , DIV_COD
						 	 , SALE_PRC
						 	 , C_GDSNUM 
					 	  FROM DS_TB_IF_SALESPLAN_GDS
					 	 WHERE IO_YYYYMM = TO_CHAR(ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1), 'YYYYMM')
--						 WHERE IO_YYYYMM = 202307
						) B 
				ON A.DIV_COD = B.DIV_COD 
			   AND A.SALE_PRC = B.SALE_PRC
			  LEFT JOIN (
						SELECT YYYYMM
							 , DIV_COD
							 , SALE_PRC
							 , SUM(C_GDSNUM) OVER (PARTITION BY DIV_COD, SALE_PRC ORDER BY YYYYMM) AS C_GDSNUM
						  FROM (
								SELECT B.YYYYMM
									 , B.DIV_COD
									 , B.SALE_PRC
									 , SUM(NVL(C_GDSNUM, 0)) AS C_GDSNUM
								  FROM DS_TB_IF_SALESPLAN_DIVPLAN A
								 RIGHT JOIN (
								 			 SELECT DISTINCT B.YYYYMM
							  				 	  , A.DIV_COD
							  				   	  , C.SALE_PRC
							  			       FROM DS_TB_IF_SALESPLAN_GDS A
							  			      CROSS JOIN (
							  			      			  SELECT DISTINCT YYYYMM 
							  			  				    FROM TB_CM_CALENDAR 
							  			  			       WHERE DAT BETWEEN ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1) AND ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 12)
							  			  			     ) B
								  			  CROSS JOIN (
								  			  			  SELECT DISTINCT SALE_PRC 
							  			  				    FROM DS_TB_IF_SALESPLAN_GDS 
							  			  			       WHERE SALE_PRC IN (500, 1000, 1500, 2000, 3000, 5000) 
							  			  			     ) C
						  			  	 	) B
						  		    ON A.YYYYMM = B.YYYYMM 
						  		   AND A.DIV_COD = B.DIV_COD 
						  		   AND A.SALE_PRC = B.SALE_PRC
						 WHERE B.YYYYMM >= TO_CHAR(TRUNC(SYSDATE, 'MM'), 'YYYYMM')
--						 WHERE B.YYYYMM > 202307
						 GROUP BY B.YYYYMM, B.DIV_COD, B.SALE_PRC
						   	)
				  		 ) C 
				 ON A.YYYYMM = C.YYYYMM 
			    AND A.DIV_COD = C.DIV_COD 
			    AND A.SALE_PRC = C.SALE_PRC
			)
	PIVOT (MAX(C_GDSNUM) FOR SALE_PRC IN 
						('500' AS CATE_FACTOR1, '1000' AS CATE_FACTOR2, '1500' AS CATE_FACTOR3, 
						 '2000' AS CATE_FACTOR4, '3000' AS CATE_FACTOR5, '5000' AS CATE_FACTOR6))
	)
	, CAL AS (
		SELECT DAT
			 , YYYYMM
		  FROM TB_CM_CALENDAR
		 WHERE DAT BETWEEN '2020-01-01' AND '2100-12-31'
	)
	SELECT RAWTOHEX(SYS_GUID()) AS ID
		 , A.DAT AS BASE_DATE
		 , CATE_CD
		 , NVL(CATE_FACTOR1, 0) AS CATE_FACTOR1
		 , NVL(CATE_FACTOR2, 0) AS CATE_FACTOR2
		 , NVL(CATE_FACTOR3, 0) AS CATE_FACTOR3
		 , NVL(CATE_FACTOR4, 0) AS CATE_FACTOR4
		 , NVL(CATE_FACTOR5, 0) AS CATE_FACTOR5
		 , NVL(CATE_FACTOR6, 0) AS CATE_FACTOR6
	  FROM CAL A
	  LEFT JOIN ITEM_CNT B ON A.YYYYMM = B.YYYYMM ) B
	    ON (A.BASE_DATE = B.BASE_DATE AND A.CATE_CD = B.CATE_CD)
	  WHEN MATCHED THEN 
	  UPDATE SET A.CATE_FACTOR1 = B.CATE_FACTOR1, A.CATE_FACTOR2 = B.CATE_FACTOR2, A.CATE_FACTOR3 = B.CATE_FACTOR3
	  		   , A.CATE_FACTOR4 = B.CATE_FACTOR4, A.CATE_FACTOR5 = B.CATE_FACTOR5, A.CATE_FACTOR6 = B.CATE_FACTOR6
			   , A.MODIFY_BY = 'SYSTEM', A.MODIFY_DTTM = SYSDATE
	  WHEN NOT MATCHED THEN
	  INSERT (ID, BASE_DATE, CATE_CD, CATE_FACTOR1, CATE_FACTOR2, CATE_FACTOR3, CATE_FACTOR4, CATE_FACTOR5, CATE_FACTOR6, CREATE_BY, CREATE_DTTM) 
	  VALUES (B.ID, B.BASE_DATE, B.CATE_CD, B.CATE_FACTOR1, B.CATE_FACTOR2, B.CATE_FACTOR3
	 		, B.CATE_FACTOR4, B.CATE_FACTOR5, B.CATE_FACTOR6, 'SYSTEM', SYSDATE);
		
	 COMMIT;
      P_RT_ROLLBACK_FLAG := 'true';
	  P_RT_MSG := 'MSG_0001';  --저장 되었습니다.

	EXCEPTION WHEN OTHERS THEN
		ROLLBACK;
	
		a := SQLCODE;
		b := SQLERRM;
		c := SYS.dbms_utility.format_error_backtrace;
	
		BEGIN
			INSERT INTO TB_SCM100M_ERR_LOG(ERR_FILE, ERR_CODE, ERR_MSG, ERR_LINE, ERR_DTTM)
			SELECT 'SP_UI_BF_00_FACTOR_MA', a, b, c, SYSDATE FROM DUAL;
		
			COMMIT;
		END;
	
--   EXCEPTION
--    WHEN OTHERS THEN
--          IF(SQLCODE = -20001)
--          THEN
--              P_RT_ROLLBACK_FLAG := 'false';
--              P_RT_MSG := sqlerrm;
--          ELSE
--            SP_COMM_RAISE_ERR();
--          END IF;
	END;