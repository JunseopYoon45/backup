CREATE OR REPLACE PROCEDURE DWSCM."SP_UI_BF_55_M_Q1" (
     p_VER_CD         VARCHAR2
	,p_FROM_DATE	  DATE := NULL
	,p_TO_DATE		  DATE := NULL
	,p_ITEM_LV		  VARCHAR2 := NULL -- id 로 넘어옴
	,p_ITEM_CD		  VARCHAR2 := NULL
	,p_SALES_LV	      VARCHAR2 := NULL
	,p_SALES_CD		  VARCHAR2 := NULL
	,p_SRC_TP		  VARCHAR2 
	,p_GRADE		  VARCHAR2 := 'N'
	,p_SUM			  VARCHAR2 := 'Y'
    ,pRESULT          OUT SYS_REFCURSOR
)IS 

	v_TO_DATE date:='';
	v_BUCKET VARCHAR2(2);
	v_EXISTS_NUM INT :=0;
	v_SRC_TP VARCHAR2(5) := NULL;

BEGIN

    SELECT MAX(BASE_DATE) INTO v_TO_DATE
    FROM TB_CM_ACTUAL_SALES;
   
    SELECT TARGET_BUKT_CD INTO v_BUCKET 
      FROM TB_BF_CONTROL_BOARD_VER_DTL WHERE 1=1 AND VER_CD = p_VER_CD AND ENGINE_TP_CD IS NOT NULL AND ROWNUM=1;

	v_SRC_TP := NVL(p_SRC_TP,'');
	SELECT CASE WHEN EXISTS (SELECT 1 FROM TB_CM_ITEM_LEVEL_MGMT WHERE LV_MGMT_ID = p_ITEM_LV) THEN 1 ELSE 0 END INTO v_EXISTS_NUM
    FROM DUAL;
   
    DELETE TEMP_ITEM_HIER2;
    DELETE TEMP_ACCT_HIER2;
    COMMIT;
   
	INSERT INTO TEMP_ITEM_HIER2 (
        SELECT IH.DESCENDANT_ID AS DESC_ID
             , IH.DESCENDANT_CD AS DESC_CD
             , IH.DESCENDANT_NM AS DESC_NM
             , IH.ANCESTER_CD 	AS ANCS_CD
             , IL.ITEM_LV_NM 	AS ANCS_NM
          FROM TB_DPD_ITEM_HIER_CLOSURE IH
         INNER JOIN TB_CM_ITEM_LEVEL_MGMT IL 
         	ON IH.ANCESTER_ID = IL.ID
         INNER JOIN TB_CM_ITEM_MST IM
         	ON IH.DESCENDANT_CD = IM.ITEM_CD
         WHERE 1=1
           AND IL.LV_MGMT_ID = p_ITEM_LV
           AND IH.LEAF_YN = 'Y'
           AND IM.ATTR_03 LIKE v_SRC_TP||'%'
           AND ANCESTER_CD LIKE p_ITEM_CD||'%'  
         UNION ALL
        SELECT IH.DESCENDANT_ID AS DESC_ID
             , IH.DESCENDANT_CD AS DESC_CD
             , IH.DESCENDANT_NM AS DESC_NM
             , IH.ANCESTER_CD 	AS ANCS_CD
             , CAST(IT.ITEM_NM 	AS VARCHAR2(255)) AS ANCS_NM
          FROM TB_DPD_ITEM_HIER_CLOSURE IH
         INNER JOIN TB_CM_ITEM_MST IT
            ON IH.ANCESTER_ID = IT.ID 
         WHERE 1=1
           AND IH.LEAF_YN = 'Y'
           AND 1 = CASE WHEN EXISTS (SELECT 1 FROM TB_CM_ITEM_LEVEL_MGMT WHERE LV_MGMT_ID = p_ITEM_LV) THEN 0 ELSE 1 END
           AND IT.ATTR_03 LIKE v_SRC_TP||'%'
           AND ANCESTER_CD LIKE p_ITEM_CD||'%'
    	);
    
   	COMMIT;
   
    INSERT INTO TEMP_ACCT_HIER2 (
        SELECT SH.DESCENDANT_ID AS DESC_ID
             , SH.DESCENDANT_CD AS DESC_CD
             , SH.DESCENDANT_NM AS DESC_NM
             , SH.ANCESTER_CD 	AS ANCS_CD
             , SL.SALES_LV_NM 	AS ANCS_NM
          FROM TB_DPD_SALES_HIER_CLOSURE SH
         INNER JOIN TB_DP_SALES_LEVEL_MGMT SL 
         	ON SH.ANCESTER_ID = SL.ID 
         WHERE 1=1
           AND SL.LV_MGMT_ID = p_SALES_LV
           AND SH.LEAF_YN = 'Y' 
           AND ANCESTER_CD LIKE p_SALES_CD||'%'
         UNION ALL
        SELECT SH.DESCENDANT_ID AS DESC_ID
             , SH.DESCENDANT_CD AS DESC_CD
             , SH.DESCENDANT_NM AS DESC_NM
             , SH.ANCESTER_CD 	AS ANCS_CD
             , AM.ACCOUNT_NM	AS ANCS_NM
          FROM TB_DPD_SALES_HIER_CLOSURE SH
         INNER JOIN TB_DP_ACCOUNT_MST AM 
         	ON SH.ANCESTER_ID = AM.ID
         WHERE 1=1
           AND SH.LEAF_YN = 'Y'
           AND 1 = CASE WHEN EXISTS (SELECT 1 FROM TB_DP_SALES_LEVEL_MGMT WHERE LV_MGMT_ID = p_SALES_LV) THEN 0 ELSE 1 END
           AND ANCESTER_CD LIKE p_SALES_CD||'%'
    	);
   
    COMMIT;

    IF p_SUM = 'Y'
    THEN
    OPEN pRESULT FOR
    WITH CAL AS (
        SELECT MIN(DAT)          AS FROM_DATE
             , MAX(DAT)          AS TO_DATE
             , MIN(YYYYMM)       AS YYYYMM
             , COUNT(DAT)        AS DAT_CNT
          FROM TB_CM_CALENDAR    
         WHERE DAT BETWEEN p_FROM_DATE AND LAST_DAY(p_TO_DATE)
         GROUP BY YYYY, MM, TO_CHAR(DP_WK)
        )
	, SA AS (
        SELECT BASE_DATE + 0 AS FROM_DATE
        	 , COALESCE(LEAD(BASE_DATE+0,1) OVER (PARTITION BY IH.DESC_CD, AH.DESC_CD ORDER BY BASE_DATE ASC)-1, LAST_DAY(v_TO_DATE) ) AS TO_DATE
             , IH.ANCS_CD 	 AS ITEM_CD
             , AH.ANCS_CD 	 AS ACCOUNT_CD
             , QTY
          FROM TB_CM_ACTUAL_SALES S
         INNER JOIN TEMP_ACCT_HIER2 AH 
         	ON AH.DESC_ID = S.ACCOUNT_ID
         INNER JOIN TEMP_ITEM_HIER2 IH 
         	ON IH.DESC_ID = S.ITEM_MST_ID
         WHERE BASE_DATE BETWEEN p_FROM_DATE AND LAST_DAY(p_TO_DATE)
		)
	, ACT_SALES AS (
    	SELECT TRUNC(MIN(CAL.FROM_DATE), 'MONTH') AS BASE_DATE
    		 , ITEM_CD
    		 , ACCOUNT_CD
    	     , SUM(ROUND(SA.QTY * CAL.DAT_CNT / (SA.TO_DATE-SA.FROM_DATE+1)))  AS QTY
    	  FROM SA
    	 INNER JOIN CAL 
    	 	ON CAL.FROM_DATE BETWEEN SA.FROM_DATE AND SA.TO_DATE
    	 GROUP BY ITEM_CD, ACCOUNT_CD, YYYYMM
		)
--	, ACT_SALES AS (
--		SELECT BASE_DATE
--			 , IH.ANCS_CD AS ITEM_CD
--			 , AH.ANCS_CD AS ACCOUNT_CD
--			 , SUM(QTY) AS QTY
--          FROM TB_CM_ACTUAL_SALES_AGG_M S
--         INNER JOIN TEMP_ACCT_HIER2 AH ON AH.DESC_CD = S.ACCOUNT_CD
--         INNER JOIN TEMP_ITEM_HIER2 IH ON IH.DESC_CD = S.ITEM_CD		
--         GROUP BY IH.ANCS_CD, AH.ANCS_CD, BASE_DATE
--	)		
    , FINAL AS (
        SELECT p_VER_CD    AS VER_CD
             , IH.ANCS_CD  AS ITEM_CD
             , IH.ANCS_NM  AS ITEM_NM
             , AH.ANCS_CD  AS ACCOUNT_CD
             , AH.ANCS_NM  AS ACCOUNT_NM
             , F.BASE_DATE AS BASE_DATE 
             , SUM(F.QTY) 				AS QTY
             , MIN(F.BEST_ENGINE_TP_CD) AS ENGINE_TP_CD
          FROM TB_BF_RT_FINAL_M F
         INNER JOIN TEMP_ITEM_HIER2 IH 
         	ON F.ITEM_CD = IH.DESC_CD
         INNER JOIN TEMP_ACCT_HIER2 AH 
         	ON F.ACCOUNT_CD = AH.DESC_CD
         WHERE F.VER_CD = p_VER_CD 
           AND F.BASE_DATE BETWEEN p_FROM_DATE AND LAST_DAY(p_TO_DATE)
         GROUP BY IH.ANCS_CD, IH.ANCS_NM, AH.ANCS_CD, AH.ANCS_NM, F.BASE_DATE
    	) 
    , WAPE AS (
        SELECT A.ITEM_CD
    	 	 , A.ITEM_NM
             , A.ACCOUNT_CD AS ACCT_CD
             , A.ACCOUNT_NM AS ACCT_NM
             , A.BASE_DATE
             -- 예측
             , A.QTY PREDICT
             -- 실적
             , B.QTY ACT_SALES
             -- 개별정확도
             , CASE WHEN B.QTY = 0 THEN 0 ELSE (CASE WHEN (1-ABS(A.QTY-B.QTY)/B.QTY) >= 0 THEN (1-ABS(A.QTY-B.QTY)/B.QTY)*100 ELSE 0 END) END WAPE
		 	 , CASE WHEN EXISTS (SELECT 1 FROM TB_CM_ITEM_LEVEL_MGMT WHERE LV_MGMT_ID = p_ITEM_LV) THEN NULL ELSE ENGINE_TP_CD END ENGINE_TP_CD
          FROM FINAL A
         INNER JOIN ACT_SALES B ON A.ITEM_CD=B.ITEM_CD AND A.ACCOUNT_CD=B.ACCOUNT_CD AND A.BASE_DATE = B.BASE_DATE
        ) 
    , RT_ACCRY AS (
		SELECT ITEM_CD				  	  AS ITEM
			 , ITEM_NM				  	  AS ITEM_NM
			 , ACCT_CD				  	  AS SALES
			 , ACCT_NM				      AS ACCT_NM
			 , MIN(ENGINE_TP_CD) 		  AS ENGINE_TP_CD
			 , 'ACT_SALES_QTY' 			  AS CATEGORY
			 , BASE_DATE 				  AS "DATE"
			 , CAST(FLOOR(SUM(ACT_SALES)) AS VARCHAR2(10)) ACCRY
			 , 1						  AS ORDER_VAL
		  FROM WAPE
		 GROUP BY ITEM_CD, ITEM_NM, ACCT_CD, ACCT_NM, BASE_DATE
		 UNION 
		SELECT ITEM_CD				      AS ITEM
			 , ITEM_NM				      AS ITEM_NM
			 , ACCT_CD				      AS SALES
			 , ACCT_NM				      AS ACCT_NM
			 , MIN(ENGINE_TP_CD) 		  AS ENGINE_TP_CD
			 , 'BF_QTY'				      AS CATEGORY
			 , BASE_DATE 			      AS "DATE"
			 , CAST(FLOOR(SUM(PREDICT))   AS VARCHAR2(10)) ACCRY
			 , 2					      AS ORDER_VAL
		  FROM WAPE
		 GROUP BY ITEM_CD, ITEM_NM, ACCT_CD, ACCT_NM, BASE_DATE
		 UNION
		SELECT ITEM_CD				  AS ITEM
			 , ITEM_NM				  AS ITEM_NM
			 , ACCT_CD				  AS SALES
			 , ACCT_NM				  AS ACCT_NM
			 , MIN(ENGINE_TP_CD)      AS ENGINE_TP_CD
			 , 'DMND_PRDICT_ACCURCY'  AS CATEGORY
			 , BASE_DATE 		      AS "DATE"
			 , CASE WHEN SUM(ACT_SALES) = 0 THEN '0%'
			 		WHEN SUM(ACT_SALES) IS NULL THEN NULL
			        WHEN (1 - ABS(SUM(ACT_SALES) - SUM(PREDICT)) / SUM(ACT_SALES)) * 100 <= 0 THEN '0%'
			        ELSE RTRIM(TO_CHAR(ROUND((1 - ABS(SUM(ACT_SALES) - SUM(PREDICT)) / SUM(ACT_SALES)) * 100, 1)), TO_CHAR(0, 'D')) || '%' END ACCRY
			 , 3					  AS ORDER_VAL
		  FROM WAPE
		 GROUP BY ITEM_CD, ITEM_NM, ACCT_CD, ACCT_NM, BASE_DATE
        )
    SELECT * FROM RT_ACCRY
     ORDER BY ITEM, SALES, "DATE", ORDER_VAL;
    
    COMMIT;    
    DELETE TEMP_ITEM_HIER2;
    DELETE TEMP_ACCT_HIER2;
    COMMIT;

    ELSE
    OPEN pRESULT FOR
	WITH CAL AS (
        SELECT MIN(DAT)			AS FROM_DATE
             , MAX(DAT)         AS TO_DATE
             , MIN(YYYYMM)      AS YYYYMM
             , COUNT(DAT)       AS DAT_CNT
          FROM TB_CM_CALENDAR
         WHERE DAT BETWEEN p_FROM_DATE AND LAST_DAY(p_TO_DATE)
         GROUP BY YYYY, DP_WK, TO_CHAR(DP_WK)
    	)
	, SA AS (
        SELECT BASE_DATE + 0 AS FROM_DATE
        	 , COALESCE(LEAD(BASE_DATE+0,1) OVER (PARTITION BY IH.DESC_CD, AH.DESC_CD ORDER BY BASE_DATE ASC)-1, LAST_DAY(v_TO_DATE) ) AS TO_DATE
             , IH.DESC_CD 	 AS ITEM_CD
             , AH.DESC_CD 	 AS ACCOUNT_CD             
             , QTY
          FROM TB_CM_ACTUAL_SALES S
         INNER JOIN TEMP_ACCT_HIER2 AH 
         	ON AH.DESC_ID = S.ACCOUNT_ID
         INNER JOIN TEMP_ITEM_HIER2 IH 
         	ON IH.DESC_ID = S.ITEM_MST_ID
         WHERE BASE_DATE BETWEEN p_FROM_DATE AND LAST_DAY(p_TO_DATE)
		) 
	, ACT_SALES AS (
    	SELECT TRUNC(MIN(CAL.FROM_DATE), 'MONTH') AS BASE_DATE
    		 , ITEM_CD
    		 , ACCOUNT_CD
    	     , SUM(ROUND(SA.QTY * CAL.DAT_CNT / (SA.TO_DATE-SA.FROM_DATE+1)))  AS QTY
    	  FROM SA
    	 INNER JOIN CAL 
    	 	ON CAL.FROM_DATE BETWEEN SA.FROM_DATE AND SA.TO_DATE
    	 GROUP BY ITEM_CD, ACCOUNT_CD, YYYYMM
		) 
	, FINAL AS (
        SELECT p_VER_CD 				AS VER_CD
             , IH.DESC_CD 				AS ITEM_CD
             , IH.DESC_NM				AS ITEM_NM
             , AH.DESC_CD 				AS ACCOUNT_CD
             , AH.DESC_NM 				AS ACCOUNT_NM    
             , F.BASE_DATE 				AS BASE_DATE
             , SUM(F.QTY) 				AS QTY
             , MIN(F.BEST_ENGINE_TP_CD) AS ENGINE_TP_CD
          FROM TB_BF_RT_FINAL_M F
         INNER JOIN TEMP_ITEM_HIER2 IH 
         	ON F.ITEM_CD = IH.DESC_CD
         INNER JOIN TEMP_ACCT_HIER2 AH 
         	ON F.ACCOUNT_CD = AH.DESC_CD
         WHERE F.VER_CD = p_VER_CD 
           AND F.BASE_DATE BETWEEN p_FROM_DATE AND LAST_DAY(p_TO_DATE)
         GROUP BY IH.DESC_CD, IH.DESC_NM, AH.DESC_CD, AH.DESC_NM, F.BASE_DATE
	    ) 
    , WAPE AS (
        SELECT A.ITEM_CD
        	 , A.ITEM_NM
             , A.ACCOUNT_CD AS ACCT_CD
             , A.ACCOUNT_NM AS ACCT_NM
             , A.BASE_DATE
             -- 예측
             , A.QTY PREDICT
             -- 실적
             , B.QTY ACT_SALES
             -- 개별정확도
             , CASE WHEN B.QTY = 0 THEN 0 ELSE (CASE WHEN (1-ABS(A.QTY-B.QTY)/B.QTY) >= 0 THEN (1-ABS(A.QTY-B.QTY)/B.QTY)*100 ELSE 0 END) END WAPE
			 , A.ENGINE_TP_CD
          FROM FINAL A
          LEFT JOIN ACT_SALES B 
          	ON A.ITEM_CD = B.ITEM_CD 
           AND A.ACCOUNT_CD = B.ACCOUNT_CD 
           AND A.BASE_DATE = B.BASE_DATE
	    )     
 	, RT_ACCRY AS (
		SELECT ITEM_CD				  	  AS ITEM
			 , ITEM_NM				 	  AS ITEM_NM
			 , ACCT_CD				  	  AS SALES
			 , ACCT_NM				  	  AS ACCT_NM
			 , MIN(ENGINE_TP_CD) 		  AS ENGINE_TP_CD
			 , 'ACT_SALES_QTY' 			  AS CATEGORY
			 , BASE_DATE 				  AS "DATE"
			 , CAST(FLOOR(SUM(ACT_SALES)) AS VARCHAR2(10)) AS ACCRY
			 , 1 						  AS ORDER_VAL
		  FROM WAPE
		 GROUP BY ITEM_CD, ITEM_NM, ACCT_CD, ACCT_NM, BASE_DATE
		 UNION 
		SELECT ITEM_CD				    AS ITEM
			 , ITEM_NM				    AS ITEM_NM
			 , ACCT_CD				    AS SALES
			 , ACCT_NM				    AS ACCT_NM
			 , MIN(ENGINE_TP_CD) 		AS ENGINE_TP_CD
			 , 'BF_QTY'				    AS CATEGORY
			 , BASE_DATE 				AS "DATE"
			 , CAST(FLOOR(SUM(PREDICT)) AS VARCHAR2(10)) ACCRY
			 , 2 						AS ORDER_VAL
		  FROM WAPE
		 GROUP BY ITEM_CD, ITEM_NM, ACCT_CD, ACCT_NM, BASE_DATE
		 UNION
		SELECT ITEM_CD				 AS ITEM
			 , ITEM_NM				 AS ITEM_NM
			 , ACCT_CD				 AS SALES
			 , ACCT_NM				 AS ACCT_NM
			 , MIN(ENGINE_TP_CD)     AS ENGINE_TP_CD
			 , 'DMND_PRDICT_ACCURCY' AS CATEGORY
			 , BASE_DATE 			 AS "DATE"
			 , CASE WHEN SUM(ACT_SALES) = 0 THEN '0%'
			 		WHEN SUM(ACT_SALES) IS NULL THEN NULL
			        WHEN (1 - ABS(SUM(ACT_SALES) - SUM(PREDICT)) / SUM(ACT_SALES)) * 100 <= 0 THEN '0%'
			        ELSE RTRIM(TO_CHAR(ROUND((1 - ABS(SUM(ACT_SALES) - SUM(PREDICT)) / SUM(ACT_SALES)) * 100, 1)), TO_CHAR(0, 'D')) || '%' END ACCRY
			 , 3 					 AS ORDER_VAL
		  FROM WAPE
		 GROUP BY ITEM_CD, ITEM_NM, ACCT_CD, ACCT_NM, BASE_DATE
 	   )
    SELECT * FROM RT_ACCRY
     ORDER BY ITEM, SALES, "DATE", ORDER_VAL;
    COMMIT;
    DELETE TEMP_ITEM_HIER2;
    DELETE TEMP_ACCT_HIER2;
    COMMIT;
   
    END IF;

END;