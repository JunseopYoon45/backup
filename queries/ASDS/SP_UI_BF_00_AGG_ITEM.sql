CREATE OR REPLACE PROCEDURE DWSCM."SP_UI_BF_00_AGG_ITEM" (
	p_VER_CD        	VARCHAR2
  , P_RT_ROLLBACK_FLAG	OUT VARCHAR2   
  , P_RT_MSG			OUT VARCHAR2  
)
IS 
	
	p_TARGET_BUKT_CD 	VARCHAR2(10);
	p_TARGET_TO_DATE 	DATE;
	p_TARGET_FROM_DATE 	DATE;
	p_TO_DATE 			DATE;
	p_THLD_A			NUMBER;
	p_THLD_B			NUMBER;
	p_THLD_X			NUMBER;
	p_THLD_Y			NUMBER;

BEGIN
	
	SELECT DISTINCT TARGET_BUKT_CD
			  , INPUT_TO_DATE
			  , (
                 SELECT FROM_DATE
                   FROM (
                     SELECT LEAD(MIN(DAT),4) OVER(ORDER BY TO_CHAR(DP_WK) DESC) AS "FROM_DATE"
                       FROM TB_CM_CALENDAR 
                      WHERE DAT BETWEEN (INPUT_TO_DATE+1)-4*7 AND INPUT_TO_DATE+1
                   GROUP BY TO_CHAR(DP_WK) 
                   )
                 WHERE ROWNUM=1
              )
              , TARGET_TO_DATE
                INTO
                p_TARGET_BUKT_CD
              , p_TARGET_TO_DATE
              , p_TARGET_FROM_DATE
              , p_TO_DATE
           FROM TB_BF_CONTROL_BOARD_VER_DTL
          WHERE VER_CD = p_VER_CD
            AND ENGINE_TP_CD IS NOT NULL
        ;
	
	SELECT ATTR_01 INTO p_THLD_A
  	  FROM TB_CM_COMM_CONFIG	
	 WHERE CONF_GRP_CD = 'BF_ABCXYZ_CRITERIA' AND CONF_CD = 'AB';
	
	SELECT ATTR_01 INTO p_THLD_B
 	  FROM TB_CM_COMM_CONFIG	
	 WHERE CONF_GRP_CD = 'BF_ABCXYZ_CRITERIA' AND CONF_CD = 'BC';
	
	SELECT ATTR_01 INTO p_THLD_X
	  FROM TB_CM_COMM_CONFIG	
	 WHERE CONF_GRP_CD = 'BF_ABCXYZ_CRITERIA' AND CONF_CD = 'XY';
	
	SELECT ATTR_01 INTO p_THLD_Y
	  FROM TB_CM_COMM_CONFIG	
	 WHERE CONF_GRP_CD = 'BF_ABCXYZ_CRITERIA' AND CONF_CD = 'YZ';       
       
    DELETE FROM TB_BF_ITEM_STATS
    WHERE VER_CD = p_VER_CD;
   
    COMMIT;
   
	INSERT INTO DWSCM.TB_BF_ITEM_STATS(
		  VER_CD
		, ITEM_CD
		, LOCAT_CD
		, QTY
		, QTY_PCT_RANK
		, QTY_CV
		, QTY_ABC
		, QTY_XYZ
		, AMT
		, AMT_PCT_RANK
		, AMT_CV
		, AMT_ABC
		, AMT_XYZ
		, ACCRCY
		, CREATE_BY
		, CREATE_DTTM
		, MODIFY_BY
		, MODIFY_DTTM
	)
	WITH CAL AS (
	SELECT C.DAT AS BASE_DATE
	     , C.DP_WK
	  FROM TB_BF_CONTROL_BOARD_VER_DTL VD
	     , TB_CM_CALENDAR C
	 WHERE VD.VER_CD = p_VER_CD
	   AND VD.PROCESS_NO = 10000
	   AND C.DOW = 1
	   AND C.DAT BETWEEN VD.INPUT_FROM_DATE AND VD.INPUT_TO_DATE
	)
	, IA AS (
	SELECT DISTINCT 
	       IH.LVL04_CD AS CATE_CD
	     , IH.LVL04_NM AS CATE_NM
	     , IH.ITEM_CD
	     , IH.ITEM_NM
	     , IH.ITEM_ID
	     , AH.LVL02_CD AS LOCAT_CD
	     , AH.LVL02_NM AS LOCAT_NM
	     , AH.ACCOUNT_CD AS CHANNEL_CD
	     , AH.ACCOUNT_NM AS CHANNEL_NM
	     , AH.ACCOUNT_ID AS CHANNEL_ID
	     , F.VER_CD
	  FROM TB_BF_RT_FINAL F
	       INNER JOIN TB_DPD_ITEM_HIERACHY2 IH
	    ON F.ITEM_CD = IH.ITEM_CD
	       INNER JOIN TB_DPD_ACCOUNT_HIERACHY2 AH
	    ON F.ACCOUNT_CD = AH.ACCOUNT_CD
	 WHERE F.VER_CD = p_VER_CD 
	   AND REGEXP_INSTR(IH.ITEM_CD,'[^0-9]') = 0
	) 
	, IACAL AS (
	SELECT IA.VER_CD
	     , IA.CATE_CD
	     , IA.CATE_NM
	     , IA.ITEM_CD
	     , IA.ITEM_NM
	     , IA.ITEM_ID
	     , IA.LOCAT_CD
	     , IA.LOCAT_NM
	     , IA.CHANNEL_CD
	     , IA.CHANNEL_NM
	     , IA.CHANNEL_ID
	     , CAL.BASE_DATE
	     , CAL.DP_WK
	  FROM IA
	       CROSS JOIN CAL
	)
	, STT AS (
	SELECT C.VER_CD
	     , C.CATE_CD
	     , C.ITEM_CD
	     , C.LOCAT_CD
	     , C.BASE_DATE
	     , SUM(NVL(S.QTY,0)) AS QTY
	     , SUM(NVL(S.AMT,0)) AS AMT
	  FROM IACAL C
	       LEFT JOIN TB_CM_ACTUAL_SALES S
	    ON C.ITEM_ID = S.ITEM_MST_ID
	   AND C.CHANNEL_ID = S.ACCOUNT_ID
	   AND C.BASE_DATE = S.BASE_DATE
	 GROUP BY C.VER_CD, C.CATE_CD,C.ITEM_CD, C.LOCAT_CD, C.BASE_DATE
	)
	SELECT B.VER_CD
	     , B.ITEM_CD
	     , B.LOCAT_CD
	     , B.QTY
	     , B.QTY_PCT_RANK
	     , ROUND(B.CV_QTY,3) AS QTY_CV
	     , CASE WHEN B.QTY_PCT_RANK >=p_THLD_A THEN 'A'
	            WHEN B.QTY_PCT_RANK >=p_THLD_B THEN 'B'
	            ELSE 'C' END AS QTY_ABC
	     , CASE WHEN B.CV_QTY < p_THLD_X THEN 'X'
	            WHEN B.CV_QTY < p_THLD_Y THEN 'Y'
	            ELSE 'Z' END QTY_XYZ	            
	     , B.AMT
	     , B.AMT_PCT_RANK
	     , ROUND(B.CV_AMT,3) AS AMT_CV
	     , CASE WHEN B.AMT_PCT_RANK >=p_THLD_A THEN 'A'
	            WHEN B.AMT_PCT_RANK >=p_THLD_B THEN 'B'
	            ELSE 'C' END AS AMT_ABC
	     , CASE WHEN B.CV_AMT < p_THLD_X THEN 'X'
	            WHEN B.CV_AMT < p_THLD_Y THEN 'Y'
	            ELSE 'Z' END AMT_XYZ	            
	     , NULL AS ACCRCY
	     , 'SYSTEM'
	     , SYSDATE
	     , NULL 
	     , NULL
	  FROM (
	        SELECT A.VER_CD
	             , A.ITEM_CD
	             , A.LOCAT_CD
	             , PERCENT_RANK() OVER(ORDER BY A.SUM_QTY) AS QTY_PCT_RANK
	             , A.SUM_QTY AS QTY
	             , A.CV_QTY
	             , PERCENT_RANK() OVER(ORDER BY A.SUM_AMT) AS AMT_PCT_RANK
	             , A.SUM_AMT AS AMT
	             , A.CV_AMT
	             , A.TRX_CNT
	             , A.CAL_CNT
	          FROM (
	                SELECT T.VER_CD
	                     , T.ITEM_CD
	                     , T.LOCAT_CD
	                     , SUM(NVL(QTY,0)) AS SUM_QTY
	                     , AVG(NVL(QTY,0)) AS MEAN_QTY
	                     , STDDEV(NVL(QTY,0)) AS STD_QTY
	                     , CASE WHEN AVG(NVL(QTY,0)) = 0 THEN NULL ELSE STDDEV(NVL(QTY,0))/AVG(NVL(QTY,0)) END AS CV_QTY
	                     , SUM(NVL(AMT,0)) AS SUM_AMT
	                     , AVG(NVL(AMT,0)) AS MEAN_AMT
	                     , STDDEV(NVL(AMT,0)) AS STD_AMT
	                     , CASE WHEN AVG(NVL(AMT,0)) = 0 THEN NULL ELSE STDDEV(NVL(AMT,0))/AVG(NVL(AMT,0)) END AS CV_AMT
	                     , SUM(CASE WHEN NVL(QTY,0) > 0 THEN 1 ELSE 0 END) AS TRX_CNT
	                     , COUNT(*) AS CAL_CNT
	                  FROM STT T
	                 GROUP BY T.VER_CD, T.ITEM_CD, T.LOCAT_CD
	                ) A
	        ) B
	;

	COMMIT;

	MERGE INTO TB_BF_ITEM_STATS A USING (
		WITH IA AS (
			SELECT DISTINCT ITEM_CD, ACCOUNT_CD, ENGINE_TP_CD
			  FROM TB_BF_RT
			 WHERE 1=1
			   AND REGEXP_INSTR(ITEM_CD,'[^0-9]') = 0
			   AND VER_CD = p_VER_CD
		)
		, TGT AS (
			SELECT ITEM_CD, ACCOUNT_CD
			  FROM IA
			 GROUP BY ITEM_CD, ACCOUNT_CD
		) 
		, IA2 AS (
			SELECT ITEM_CD, SUBSTR(ACCOUNT_CD, 1,2) AS ACCOUNT_CD, ENGINE_TP_CD
			  FROM IA
			 GROUP BY ITEM_CD, SUBSTR(ACCOUNT_CD, 1,2), ENGINE_TP_CD
		)
		, RT AS (
			SELECT ENGINE_TP_CD
				 , H.ITEM_CD
				 , SUBSTR(H.ACCOUNT_CD, 1,2) AS ACCOUNT_CD
				 , H.BASE_DATE
				 , SUM(QTY) AS QTY
			  FROM TB_BF_RT_HISTORY H
			 INNER JOIN TGT ON H.ITEM_CD = TGT.ITEM_CD AND H.ACCOUNT_CD = TGT.ACCOUNT_CD
			 WHERE BASE_DATE BETWEEN p_TARGET_FROM_DATE AND p_TARGET_TO_DATE
 			   AND REGEXP_INSTR(H.ITEM_CD,'[^0-9]') = 0
			 GROUP BY ENGINE_TP_CD, H.ITEM_CD, SUBSTR(H.ACCOUNT_CD, 1,2), BASE_DATE
		)
--		, RT AS (
--			SELECT ENGINE_TP_CD
--				 , RT.ITEM_CD
--				 , SUBSTR(RT.ACCOUNT_CD, 1,2) AS ACCOUNT_CD
--				 , RT.BASE_DATE				 
--				 , SUM(QTY) AS QTY
--			  FROM TB_BF_RT RT 
--			 INNER JOIN TGT ON RT.ITEM_CD = TGT.ITEM_CD AND RT.ACCOUNT_CD = TGT.ACCOUNT_CD
--			 WHERE BASE_DATE BETWEEN p_TARGET_FROM_DATE AND p_TARGET_TO_DATE
-- 			   AND VER_CD IN (SELECT VER_CD 
-- 			   					FROM (SELECT VER_CD 
--										FROM TB_BF_CONTROL_BOARD_VER_DTL tbcbvd
--									   WHERE VER_CD < p_VER_CD AND PROCESS_NO = 1
--									   ORDER BY 1 DESC)
--								WHERE ROWNUM < 5)
--			 GROUP BY ENGINE_TP_CD, RT.ITEM_CD, SUBSTR(RT.ACCOUNT_CD, 1,2), BASE_DATE
--		)
		, ACT_SA AS (
			SELECT TGT.ITEM_CD
				 , TGT.ACCOUNT_CD
				 , BASE_DATE
				 , SUM(NVL(CASE CORRECTION_YN WHEN 'Y' THEN QTY_CORRECTION ELSE QTY END , 0 )) AS QTY
			  FROM TB_CM_ACTUAL_SALES SA
			 INNER JOIN TB_CM_ITEM_MST IM ON SA.ITEM_MST_ID = IM.ID
			 INNER JOIN TB_DP_ACCOUNT_MST AM ON SA.ACCOUNT_ID = AM.ID
			 INNER JOIN TGT ON IM.ITEM_CD = TGT.ITEM_CD AND AM.ACCOUNT_CD = TGT.ACCOUNT_CD
			 WHERE BASE_DATE BETWEEN p_TARGET_FROM_DATE AND p_TARGET_TO_DATE
			 GROUP BY TGT.ITEM_CD, TGT.ACCOUNT_CD, BASE_DATE 	
		) 
		, SA AS (
			SELECT ITEM_CD
				 , SUBSTR(ACCOUNT_CD, 1,2) AS ACCOUNT_CD
				 , BASE_DATE
				 , SUM(QTY) AS QTY
			  FROM ACT_SA
			 GROUP BY ITEM_CD, SUBSTR(ACCOUNT_CD, 1,2), BASE_DATE
		) 
		, WAPE AS (
			SELECT A.ENGINE_TP_CD 	   
		         , A.ITEM_CD
			     , A.ACCOUNT_CD	 			
			     , CASE WHEN SUM(ERR) = 0 THEN 0 ELSE (CASE WHEN SUM(ERR)/SUM(SALES)<=1 THEN SUM(ERR)/SUM(SALES) ELSE 1 END) * 100 END AS WAPE
			  FROM (
		            SELECT RT.ITEM_CD
		                 , RT.ACCOUNT_CD
		                 , RT.BASE_DATE
		                 , RT.ENGINE_TP_CD
		                 , ABS(NVL(SA.QTY, 0) - RT.QTY)					AS ERR
		                 , RT.QTY+0.00001						AS FCS
		                 , TO_NUMBER(NVL(SA.QTY, 0)) + 0.00001			AS SALES 
		              FROM RT
		             LEFT JOIN SA ON RT.ITEM_CD = SA.ITEM_CD AND RT.ACCOUNT_CD = SA.ACCOUNT_CD AND RT.BASE_DATE = SA.BASE_DATE
			        ) A
			GROUP BY A.ITEM_CD, A.ACCOUNT_CD, A.ENGINE_TP_CD 
		)
		, ACC AS (
			SELECT IA2.ENGINE_TP_CD
			     , IA2.ITEM_CD
			     , IA2.ACCOUNT_CD
			  	 , NVL(ROUND(WAPE, 3), 100) AS WAPE
			  	 , ROW_NUMBER() OVER (PARTITION BY IA2.ITEM_CD, IA2.ACCOUNT_CD ORDER BY ROUND(WAPE, 3) ASC, C.PRIORT ASC) AS SELECT_SEQ
			  FROM IA2 
			  LEFT JOIN WAPE W ON IA2.ITEM_CD = W.ITEM_CD AND IA2.ACCOUNT_CD = W.ACCOUNT_CD AND IA2.ENGINE_TP_CD = W.ENGINE_TP_CD
			 INNER JOIN TB_CM_COMM_CONFIG C ON IA2.ENGINE_TP_CD = C.CONF_CD AND C.CONF_GRP_CD = 'BF_ENGINE_TP'
		)
		, FINAL AS (
			SELECT ITEM_CD
				 , ACCOUNT_CD AS LOCAT_CD
				 , 100 - WAPE AS ACCRCY
				 , p_VER_CD AS VER_CD
			  FROM ACC
			 WHERE SELECT_SEQ = 1
		)
		SELECT ITEM_CD, LOCAT_CD, ACCRCY, VER_CD FROM FINAL) B
		ON (A.ITEM_CD = B.ITEM_CD AND A.LOCAT_CD = B.LOCAT_CD AND A.VER_CD = B.VER_CD)
		WHEN MATCHED THEN 
		UPDATE SET A.ACCRCY = B.ACCRCY
		WHEN NOT MATCHED THEN
		INSERT (ITEM_CD, LOCAT_CD, ACCRCY, VER_CD) VALUES (B.ITEM_CD, B.LOCAT_CD, B.ACCRCY, B.VER_CD)
		;
	
		COMMIT;
	
		P_RT_ROLLBACK_FLAG := 'true';
    	P_RT_MSG := 'MSG_0001';  --저장 되었습니다.

   EXCEPTION
    WHEN OTHERS THEN 
          IF(SQLCODE = -20001)
          THEN
              P_RT_ROLLBACK_FLAG := 'false';
              P_RT_MSG := sqlerrm;
          ELSE
            SP_COMM_RAISE_ERR();
          END IF;
END;